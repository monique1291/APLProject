
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'newCodeAND BOOL BREAK Bool CASE CLASS COLON COMMA COMMENTS DEF DIVIDE DIVIDEEQUAL DO DOUBLE DOUBLEQUOTES Double ELIF ELSE EQUAL EQUALEQUAL FALSE FINALLY FLOAT FOR FUNC Float GLOBAL GREATEREQUAL GREATERTHAN IDENTIFIER IF IMPORT IN INT INTEGER IS LCURVEDBRACE LESSEQUAL LESSTHAN LPAREN LSQUAREDBRACKET MAIN MINUS MINUSEQUAL NOT NOTEQUAL OR PLUS PLUSEQUAL PRINT RANGE RCURVEDBRACE RESERVEDWORD RETURN RPAREN RSQUAREDBRACKET RULE_CLOSE RULE_OPEN SINGLEQUOTES STANDARD_DATATYPE STRING SWITCH Str THEN TIMES TIMESEQUAL TRUE UNTIL VOID WHILE\n    newCode : statements\n    \n    statements : statement statements\n               | statement\n               | empty\n    \n    statement : conditional\n              | assignment_statement\n              | function_call\n              | print_statement\n              | declaration\n              | empty\n    \n    conditional : inline_if_statement\n                | block_if_else_statement\n                | for_statement\n                | while_statement\n    inline_if_statement : IF expression COLON statements\n                           \n     block_if_else_statement : IF expression COLON statements block_else_statement\n    \n     block_else_statement : ELSE statements\n    \n    for_statement : FOR expression IN range_expression\n    \n    range_expression : RANGE expression COMMA expression\n    \n    while_statement : WHILE expression COLON statements\n    \n    bool : TRUE\n         | FALSE\n    \n    print_statement : PRINT LPAREN expression RPAREN\n    \n    declaration : var_declaration\n                | function_declaration\n    \n    var_declaration : STANDARD_DATATYPE IDENTIFIER\n                    | STANDARD_DATATYPE assignment_statement\n    \n    function_declaration : VOID IDENTIFIER LPAREN argument_list RPAREN COLON\n                         | STANDARD_DATATYPE IDENTIFIER LPAREN argument_list RPAREN COLON\n    \n    expression : term\n               | expression PLUS term\n               | expression MINUS term\n               | expression TIMES term\n               | expression DIVIDE term\n               | expression EQUALEQUAL term\n               | expression EQUAL term\n               | expression NOTEQUAL term\n               | expression LESSEQUAL term\n               | expression GREATEREQUAL term\n               | expression PLUSEQUAL term\n               | expression MINUSEQUAL term\n               | expression TIMESEQUAL term\n               | expression DIVIDEEQUAL term\n               | expression GREATERTHAN term\n               | expression LESSTHAN term\n               | LPAREN expression RPAREN\n    \n    term : INTEGER\n         | FLOAT\n         | STRING\n         | IDENTIFIER\n         | bool\n    assignment_statement : IDENTIFIER EQUAL expressionfunction_call : IDENTIFIER LPAREN argument_list RPARENargument_list : expression\n                     | argument_list COMMA expression\n    empty :\n    '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,16,17,23,28,30,31,32,33,34,35,36,39,40,42,46,64,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,93,94,98,100,101,102,],[-56,0,-1,-3,-4,-5,-6,-7,-8,-9,-11,-12,-13,-14,-24,-25,-2,-30,-47,-48,-49,-50,-51,-21,-22,-26,-27,-52,-56,-56,-53,-23,-15,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-18,-20,-16,-56,-17,-29,-28,-19,]),'IDENTIFIER':([0,3,4,5,6,7,8,9,10,11,12,13,16,17,18,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,39,40,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,93,94,98,99,100,101,102,],[14,14,-4,-5,-6,-7,-8,-9,-11,-12,-13,-14,-24,-25,33,33,33,39,41,-2,33,33,33,-30,33,-47,-48,-49,-50,-51,-21,-22,-26,-27,-52,14,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,14,33,33,-53,33,-23,-15,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-18,33,-20,-16,14,-17,33,-29,-28,-19,]),'PRINT':([0,3,4,5,6,7,8,9,10,11,12,13,16,17,23,28,30,31,32,33,34,35,36,39,40,42,46,64,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,93,94,98,100,101,102,],[15,15,-4,-5,-6,-7,-8,-9,-11,-12,-13,-14,-24,-25,-2,-30,-47,-48,-49,-50,-51,-21,-22,-26,-27,-52,15,15,-53,-23,-15,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-18,-20,-16,15,-17,-29,-28,-19,]),'IF':([0,3,4,5,6,7,8,9,10,11,12,13,16,17,23,28,30,31,32,33,34,35,36,39,40,42,46,64,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,93,94,98,100,101,102,],[18,18,-4,-5,-6,-7,-8,-9,-11,-12,-13,-14,-24,-25,-2,-30,-47,-48,-49,-50,-51,-21,-22,-26,-27,-52,18,18,-53,-23,-15,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-18,-20,-16,18,-17,-29,-28,-19,]),'FOR':([0,3,4,5,6,7,8,9,10,11,12,13,16,17,23,28,30,31,32,33,34,35,36,39,40,42,46,64,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,93,94,98,100,101,102,],[19,19,-4,-5,-6,-7,-8,-9,-11,-12,-13,-14,-24,-25,-2,-30,-47,-48,-49,-50,-51,-21,-22,-26,-27,-52,19,19,-53,-23,-15,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-18,-20,-16,19,-17,-29,-28,-19,]),'WHILE':([0,3,4,5,6,7,8,9,10,11,12,13,16,17,23,28,30,31,32,33,34,35,36,39,40,42,46,64,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,93,94,98,100,101,102,],[20,20,-4,-5,-6,-7,-8,-9,-11,-12,-13,-14,-24,-25,-2,-30,-47,-48,-49,-50,-51,-21,-22,-26,-27,-52,20,20,-53,-23,-15,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-18,-20,-16,20,-17,-29,-28,-19,]),'STANDARD_DATATYPE':([0,3,4,5,6,7,8,9,10,11,12,13,16,17,23,28,30,31,32,33,34,35,36,39,40,42,46,64,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,93,94,98,100,101,102,],[21,21,-4,-5,-6,-7,-8,-9,-11,-12,-13,-14,-24,-25,-2,-30,-47,-48,-49,-50,-51,-21,-22,-26,-27,-52,21,21,-53,-23,-15,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-18,-20,-16,21,-17,-29,-28,-19,]),'VOID':([0,3,4,5,6,7,8,9,10,11,12,13,16,17,23,28,30,31,32,33,34,35,36,39,40,42,46,64,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,93,94,98,100,101,102,],[22,22,-4,-5,-6,-7,-8,-9,-11,-12,-13,-14,-24,-25,-2,-30,-47,-48,-49,-50,-51,-21,-22,-26,-27,-52,22,22,-53,-23,-15,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-18,-20,-16,22,-17,-29,-28,-19,]),'ELSE':([3,4,5,6,7,8,9,10,11,12,13,16,17,23,28,30,31,32,33,34,35,36,39,40,42,46,64,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,93,94,98,100,101,102,],[-3,-4,-5,-6,-7,-8,-9,-11,-12,-13,-14,-24,-25,-2,-30,-47,-48,-49,-50,-51,-21,-22,-26,-27,-52,-56,-56,-53,-23,94,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-18,-20,-16,-56,-17,-29,-28,-19,]),'EQUAL':([14,27,28,30,31,32,33,34,35,36,37,38,39,42,44,45,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,95,102,],[24,52,-30,-47,-48,-49,-50,-51,-21,-22,52,52,24,52,52,52,52,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,52,52,52,]),'LPAREN':([14,15,18,19,20,24,25,26,29,39,41,65,66,68,88,99,],[25,26,29,29,29,29,29,29,29,65,66,29,29,29,29,29,]),'INTEGER':([18,19,20,24,25,26,29,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,68,88,99,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'FLOAT':([18,19,20,24,25,26,29,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,68,88,99,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'STRING':([18,19,20,24,25,26,29,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,68,88,99,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'TRUE':([18,19,20,24,25,26,29,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,68,88,99,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'FALSE':([18,19,20,24,25,26,29,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,68,88,99,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'COLON':([27,28,30,31,32,33,34,35,36,38,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,96,97,],[46,-30,-47,-48,-49,-50,-51,-21,-22,64,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,100,101,]),'PLUS':([27,28,30,31,32,33,34,35,36,37,38,42,44,45,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,95,102,],[47,-30,-47,-48,-49,-50,-51,-21,-22,47,47,47,47,47,47,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,47,47,47,]),'MINUS':([27,28,30,31,32,33,34,35,36,37,38,42,44,45,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,95,102,],[48,-30,-47,-48,-49,-50,-51,-21,-22,48,48,48,48,48,48,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,48,48,48,]),'TIMES':([27,28,30,31,32,33,34,35,36,37,38,42,44,45,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,95,102,],[49,-30,-47,-48,-49,-50,-51,-21,-22,49,49,49,49,49,49,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,49,49,49,]),'DIVIDE':([27,28,30,31,32,33,34,35,36,37,38,42,44,45,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,95,102,],[50,-30,-47,-48,-49,-50,-51,-21,-22,50,50,50,50,50,50,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,50,50,50,]),'EQUALEQUAL':([27,28,30,31,32,33,34,35,36,37,38,42,44,45,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,95,102,],[51,-30,-47,-48,-49,-50,-51,-21,-22,51,51,51,51,51,51,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,51,51,51,]),'NOTEQUAL':([27,28,30,31,32,33,34,35,36,37,38,42,44,45,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,95,102,],[53,-30,-47,-48,-49,-50,-51,-21,-22,53,53,53,53,53,53,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,53,53,53,]),'LESSEQUAL':([27,28,30,31,32,33,34,35,36,37,38,42,44,45,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,95,102,],[54,-30,-47,-48,-49,-50,-51,-21,-22,54,54,54,54,54,54,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,54,54,54,]),'GREATEREQUAL':([27,28,30,31,32,33,34,35,36,37,38,42,44,45,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,95,102,],[55,-30,-47,-48,-49,-50,-51,-21,-22,55,55,55,55,55,55,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,55,55,55,]),'PLUSEQUAL':([27,28,30,31,32,33,34,35,36,37,38,42,44,45,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,95,102,],[56,-30,-47,-48,-49,-50,-51,-21,-22,56,56,56,56,56,56,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,56,56,56,]),'MINUSEQUAL':([27,28,30,31,32,33,34,35,36,37,38,42,44,45,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,95,102,],[57,-30,-47,-48,-49,-50,-51,-21,-22,57,57,57,57,57,57,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,57,57,57,]),'TIMESEQUAL':([27,28,30,31,32,33,34,35,36,37,38,42,44,45,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,95,102,],[58,-30,-47,-48,-49,-50,-51,-21,-22,58,58,58,58,58,58,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,58,58,58,]),'DIVIDEEQUAL':([27,28,30,31,32,33,34,35,36,37,38,42,44,45,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,95,102,],[59,-30,-47,-48,-49,-50,-51,-21,-22,59,59,59,59,59,59,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,59,59,59,]),'GREATERTHAN':([27,28,30,31,32,33,34,35,36,37,38,42,44,45,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,95,102,],[60,-30,-47,-48,-49,-50,-51,-21,-22,60,60,60,60,60,60,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,60,60,60,]),'LESSTHAN':([27,28,30,31,32,33,34,35,36,37,38,42,44,45,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,95,102,],[61,-30,-47,-48,-49,-50,-51,-21,-22,61,61,61,61,61,61,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,61,61,61,]),'IN':([28,30,31,32,33,34,35,36,37,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,],[-30,-47,-48,-49,-50,-51,-21,-22,63,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,]),'RPAREN':([28,30,31,32,33,34,35,36,43,44,45,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,90,91,92,],[-30,-47,-48,-49,-50,-51,-21,-22,67,-54,69,86,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,96,97,-55,]),'COMMA':([28,30,31,32,33,34,35,36,43,44,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,90,91,92,95,],[-30,-47,-48,-49,-50,-51,-21,-22,68,-54,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,68,68,-55,99,]),'RANGE':([63,],[88,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'newCode':([0,],[1,]),'statements':([0,3,46,64,94,],[2,23,70,89,98,]),'statement':([0,3,46,64,94,],[3,3,3,3,3,]),'empty':([0,3,46,64,94,],[4,4,4,4,4,]),'conditional':([0,3,46,64,94,],[5,5,5,5,5,]),'assignment_statement':([0,3,21,46,64,94,],[6,6,40,6,6,6,]),'function_call':([0,3,46,64,94,],[7,7,7,7,7,]),'print_statement':([0,3,46,64,94,],[8,8,8,8,8,]),'declaration':([0,3,46,64,94,],[9,9,9,9,9,]),'inline_if_statement':([0,3,46,64,94,],[10,10,10,10,10,]),'block_if_else_statement':([0,3,46,64,94,],[11,11,11,11,11,]),'for_statement':([0,3,46,64,94,],[12,12,12,12,12,]),'while_statement':([0,3,46,64,94,],[13,13,13,13,13,]),'var_declaration':([0,3,46,64,94,],[16,16,16,16,16,]),'function_declaration':([0,3,46,64,94,],[17,17,17,17,17,]),'expression':([18,19,20,24,25,26,29,65,66,68,88,99,],[27,37,38,42,44,45,62,44,44,92,95,102,]),'term':([18,19,20,24,25,26,29,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,68,88,99,],[28,28,28,28,28,28,28,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,28,28,28,28,28,]),'bool':([18,19,20,24,25,26,29,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,68,88,99,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'argument_list':([25,65,66,],[43,90,91,]),'range_expression':([63,],[87,]),'block_else_statement':([70,],[93,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> newCode","S'",1,None,None,None),
  ('newCode -> statements','newCode',1,'p_newCode','newParser.py',12),
  ('statements -> statement statements','statements',2,'p_statements','newParser.py',19),
  ('statements -> statement','statements',1,'p_statements','newParser.py',20),
  ('statements -> empty','statements',1,'p_statements','newParser.py',21),
  ('statement -> conditional','statement',1,'p_statement','newParser.py',33),
  ('statement -> assignment_statement','statement',1,'p_statement','newParser.py',34),
  ('statement -> function_call','statement',1,'p_statement','newParser.py',35),
  ('statement -> print_statement','statement',1,'p_statement','newParser.py',36),
  ('statement -> declaration','statement',1,'p_statement','newParser.py',37),
  ('statement -> empty','statement',1,'p_statement','newParser.py',38),
  ('conditional -> inline_if_statement','conditional',1,'p_conditional','newParser.py',45),
  ('conditional -> block_if_else_statement','conditional',1,'p_conditional','newParser.py',46),
  ('conditional -> for_statement','conditional',1,'p_conditional','newParser.py',47),
  ('conditional -> while_statement','conditional',1,'p_conditional','newParser.py',48),
  ('inline_if_statement -> IF expression COLON statements','inline_if_statement',4,'p_inline_if_statement','newParser.py',54),
  ('block_if_else_statement -> IF expression COLON statements block_else_statement','block_if_else_statement',5,'p_block_if_else_statement','newParser.py',62),
  ('block_else_statement -> ELSE statements','block_else_statement',2,'p_block_else_statement','newParser.py',69),
  ('for_statement -> FOR expression IN range_expression','for_statement',4,'p_for_statement','newParser.py',76),
  ('range_expression -> RANGE expression COMMA expression','range_expression',4,'p_range_expression','newParser.py',83),
  ('while_statement -> WHILE expression COLON statements','while_statement',4,'p_while_statement','newParser.py',90),
  ('bool -> TRUE','bool',1,'p_bool','newParser.py',97),
  ('bool -> FALSE','bool',1,'p_bool','newParser.py',98),
  ('print_statement -> PRINT LPAREN expression RPAREN','print_statement',4,'p_print_statement','newParser.py',105),
  ('declaration -> var_declaration','declaration',1,'p_declaration','newParser.py',112),
  ('declaration -> function_declaration','declaration',1,'p_declaration','newParser.py',113),
  ('var_declaration -> STANDARD_DATATYPE IDENTIFIER','var_declaration',2,'p_var_declaration','newParser.py',120),
  ('var_declaration -> STANDARD_DATATYPE assignment_statement','var_declaration',2,'p_var_declaration','newParser.py',121),
  ('function_declaration -> VOID IDENTIFIER LPAREN argument_list RPAREN COLON','function_declaration',6,'p_function_declaration','newParser.py',129),
  ('function_declaration -> STANDARD_DATATYPE IDENTIFIER LPAREN argument_list RPAREN COLON','function_declaration',6,'p_function_declaration','newParser.py',130),
  ('expression -> term','expression',1,'p_expression','newParser.py',142),
  ('expression -> expression PLUS term','expression',3,'p_expression','newParser.py',143),
  ('expression -> expression MINUS term','expression',3,'p_expression','newParser.py',144),
  ('expression -> expression TIMES term','expression',3,'p_expression','newParser.py',145),
  ('expression -> expression DIVIDE term','expression',3,'p_expression','newParser.py',146),
  ('expression -> expression EQUALEQUAL term','expression',3,'p_expression','newParser.py',147),
  ('expression -> expression EQUAL term','expression',3,'p_expression','newParser.py',148),
  ('expression -> expression NOTEQUAL term','expression',3,'p_expression','newParser.py',149),
  ('expression -> expression LESSEQUAL term','expression',3,'p_expression','newParser.py',150),
  ('expression -> expression GREATEREQUAL term','expression',3,'p_expression','newParser.py',151),
  ('expression -> expression PLUSEQUAL term','expression',3,'p_expression','newParser.py',152),
  ('expression -> expression MINUSEQUAL term','expression',3,'p_expression','newParser.py',153),
  ('expression -> expression TIMESEQUAL term','expression',3,'p_expression','newParser.py',154),
  ('expression -> expression DIVIDEEQUAL term','expression',3,'p_expression','newParser.py',155),
  ('expression -> expression GREATERTHAN term','expression',3,'p_expression','newParser.py',156),
  ('expression -> expression LESSTHAN term','expression',3,'p_expression','newParser.py',157),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','newParser.py',158),
  ('term -> INTEGER','term',1,'p_term','newParser.py',175),
  ('term -> FLOAT','term',1,'p_term','newParser.py',176),
  ('term -> STRING','term',1,'p_term','newParser.py',177),
  ('term -> IDENTIFIER','term',1,'p_term','newParser.py',178),
  ('term -> bool','term',1,'p_term','newParser.py',179),
  ('assignment_statement -> IDENTIFIER EQUAL expression','assignment_statement',3,'p_assignment_statement','newParser.py',185),
  ('function_call -> IDENTIFIER LPAREN argument_list RPAREN','function_call',4,'p_function_call','newParser.py',190),
  ('argument_list -> expression','argument_list',1,'p_argument_list','newParser.py',195),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','newParser.py',196),
  ('empty -> <empty>','empty',0,'p_empty','newParser.py',205),
]


# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BREAK Bool CASE CLASS CODE_BLOCK COLON COMMA COMMENT CONDITION DEF DIVIDE DIVIDEEQUAL DO DOUBLEQUOTES Double ELIF ELSE ELSE_IF END EQUALSIGN EQUALTO FALSE FINALLY FOR FUNC Float GLOBAL GREATEREQUAL GREATERTHAN IDENTIFIER IF IMPORT IN INT IS LESSEQUAL LESSTHAN LPAREN MAIN MINUS MINUSEQUAL NOT NOTEQUAL NUMBER OR PLUS PLUSEQUAL PRINT RANGE RETURN RPAREN RULE_CLOSE RULE_OPEN SINGLEQUOTES SWITCH Str THEN TIMES TIMESEQUAL TRUE UNTIL WHILE\n    newCode : statements\n    \n    statements : statement statements\n               | statement\n               | empty\n    \n    statement : conditional\n              | expression\n              | print_statement\n              | empty\n    \n    conditional : inline_if_statement\n\n                | for_statement\n                | while_statement\n    inline_if_statement : IF LPAREN expression RPAREN COLON statements\n                           | IF expression COLON statements ELSE statements\n    for_statement : FOR expression IN range_expression\n    \n    range_expression : RULE_OPEN RANGE NUMBER COMMA NUMBER RULE_CLOSE\n    \n    while_statement : WHILE expression COLON statements\n    \n    bool : TRUE\n         | FALSE\n    \n    print_statement : PRINT LPAREN expression RPAREN\n    \n    digit : NUMBER\n    \n    expression : expression PLUS expression\n               | expression MINUS expression\n               | expression TIMES expression\n               | expression DIVIDE expression\n               | expression EQUALTO expression\n               | expression GREATERTHAN expression\n               | expression LESSTHAN expression\n               | LPAREN expression RPAREN\n               | DOUBLEQUOTES expression DOUBLEQUOTES\n               | IDENTIFIER expression\n               | bool\n               | digit\n               | empty\n\n    \n    empty :\n    '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,13,14,15,20,21,22,23,24,25,26,27,28,29,30,32,34,40,41,42,43,44,45,46,47,48,53,54,57,59,60,61,63,64,68,],[-34,0,-1,-3,-4,-5,-6,-7,-9,-10,-11,-34,-31,-32,-17,-18,-20,-2,-34,-34,-34,-34,-34,-34,-34,-33,-30,-21,-22,-23,-24,-25,-26,-27,-28,-29,-34,-19,-14,-16,-34,-34,-12,-13,-15,]),'LPAREN':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,34,35,36,40,41,42,43,44,45,46,47,48,51,53,54,57,59,60,61,63,64,68,],[11,11,-4,-5,-6,-7,-9,-10,-11,11,11,11,-31,-32,35,36,11,11,-17,-18,-20,-2,11,11,11,11,11,11,11,-33,-30,11,11,-21,-22,-23,-24,-25,-26,-27,-28,-29,11,11,-19,-14,-16,11,11,-12,-13,-15,]),'DOUBLEQUOTES':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,34,35,36,40,41,42,43,44,45,46,47,48,51,53,54,57,59,60,61,63,64,68,],[12,12,-4,-5,-6,-7,-9,-10,-11,12,12,12,-31,-32,12,12,12,-17,-18,-20,-2,12,12,12,12,12,12,12,-33,48,-30,12,12,-21,-22,-23,-24,-25,-26,-27,-28,-29,12,12,-19,-14,-16,12,12,-12,-13,-15,]),'IDENTIFIER':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,34,35,36,40,41,42,43,44,45,46,47,48,51,53,54,57,59,60,61,63,64,68,],[13,13,-4,-5,-6,-7,-9,-10,-11,13,13,13,-31,-32,13,13,13,-17,-18,-20,-2,13,13,13,13,13,13,13,-33,-30,13,13,-21,-22,-23,-24,-25,-26,-27,-28,-29,13,13,-19,-14,-16,13,13,-12,-13,-15,]),'PRINT':([0,3,4,5,6,7,8,9,10,13,14,15,20,21,22,23,24,25,26,27,28,29,30,32,34,40,41,42,43,44,45,46,47,48,51,53,54,57,59,60,61,63,64,68,],[16,16,-4,-5,-6,-7,-9,-10,-11,-34,-31,-32,-17,-18,-20,-2,-34,-34,-34,-34,-34,-34,-34,-33,-30,-21,-22,-23,-24,-25,-26,-27,-28,-29,16,16,-19,-14,-16,16,16,-12,-13,-15,]),'IF':([0,3,4,5,6,7,8,9,10,13,14,15,20,21,22,23,24,25,26,27,28,29,30,32,34,40,41,42,43,44,45,46,47,48,51,53,54,57,59,60,61,63,64,68,],[17,17,-4,-5,-6,-7,-9,-10,-11,-34,-31,-32,-17,-18,-20,-2,-34,-34,-34,-34,-34,-34,-34,-33,-30,-21,-22,-23,-24,-25,-26,-27,-28,-29,17,17,-19,-14,-16,17,17,-12,-13,-15,]),'FOR':([0,3,4,5,6,7,8,9,10,13,14,15,20,21,22,23,24,25,26,27,28,29,30,32,34,40,41,42,43,44,45,46,47,48,51,53,54,57,59,60,61,63,64,68,],[18,18,-4,-5,-6,-7,-9,-10,-11,-34,-31,-32,-17,-18,-20,-2,-34,-34,-34,-34,-34,-34,-34,-33,-30,-21,-22,-23,-24,-25,-26,-27,-28,-29,18,18,-19,-14,-16,18,18,-12,-13,-15,]),'WHILE':([0,3,4,5,6,7,8,9,10,13,14,15,20,21,22,23,24,25,26,27,28,29,30,32,34,40,41,42,43,44,45,46,47,48,51,53,54,57,59,60,61,63,64,68,],[19,19,-4,-5,-6,-7,-9,-10,-11,-34,-31,-32,-17,-18,-20,-2,-34,-34,-34,-34,-34,-34,-34,-33,-30,-21,-22,-23,-24,-25,-26,-27,-28,-29,19,19,-19,-14,-16,19,19,-12,-13,-15,]),'TRUE':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,34,35,36,40,41,42,43,44,45,46,47,48,51,53,54,57,59,60,61,63,64,68,],[20,20,-4,-5,-6,-7,-9,-10,-11,20,20,20,-31,-32,20,20,20,-17,-18,-20,-2,20,20,20,20,20,20,20,-33,-30,20,20,-21,-22,-23,-24,-25,-26,-27,-28,-29,20,20,-19,-14,-16,20,20,-12,-13,-15,]),'FALSE':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,34,35,36,40,41,42,43,44,45,46,47,48,51,53,54,57,59,60,61,63,64,68,],[21,21,-4,-5,-6,-7,-9,-10,-11,21,21,21,-31,-32,21,21,21,-17,-18,-20,-2,21,21,21,21,21,21,21,-33,-30,21,21,-21,-22,-23,-24,-25,-26,-27,-28,-29,21,21,-19,-14,-16,21,21,-12,-13,-15,]),'NUMBER':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,34,35,36,40,41,42,43,44,45,46,47,48,51,53,54,57,59,60,61,62,63,64,66,68,],[22,22,-4,-5,-6,-7,-9,-10,-11,22,22,22,-31,-32,22,22,22,-17,-18,-20,-2,22,22,22,22,22,22,22,-33,-30,22,22,-21,-22,-23,-24,-25,-26,-27,-28,-29,22,22,-19,-14,-16,22,22,65,-12,-13,67,-15,]),'PLUS':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,57,59,60,61,63,64,68,],[-34,-3,-4,-5,24,-7,-9,-10,-11,-34,-34,-34,-31,-32,-34,-34,-34,-17,-18,-20,-2,-34,-34,-34,-34,-34,-34,-34,24,-33,24,24,-34,-34,24,24,24,24,24,24,24,24,24,24,-28,-29,24,24,-34,-34,-19,-28,-14,-16,-34,-34,-12,-13,-15,]),'MINUS':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,57,59,60,61,63,64,68,],[-34,-3,-4,-5,25,-7,-9,-10,-11,-34,-34,-34,-31,-32,-34,-34,-34,-17,-18,-20,-2,-34,-34,-34,-34,-34,-34,-34,25,-33,25,25,-34,-34,25,25,25,25,25,25,25,25,25,25,-28,-29,25,25,-34,-34,-19,-28,-14,-16,-34,-34,-12,-13,-15,]),'TIMES':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,57,59,60,61,63,64,68,],[-34,-3,-4,-5,26,-7,-9,-10,-11,-34,-34,-34,-31,-32,-34,-34,-34,-17,-18,-20,-2,-34,-34,-34,-34,-34,-34,-34,26,-33,26,26,-34,-34,26,26,26,26,26,26,26,26,26,26,-28,-29,26,26,-34,-34,-19,-28,-14,-16,-34,-34,-12,-13,-15,]),'DIVIDE':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,57,59,60,61,63,64,68,],[-34,-3,-4,-5,27,-7,-9,-10,-11,-34,-34,-34,-31,-32,-34,-34,-34,-17,-18,-20,-2,-34,-34,-34,-34,-34,-34,-34,27,-33,27,27,-34,-34,27,27,27,27,27,27,27,27,27,27,-28,-29,27,27,-34,-34,-19,-28,-14,-16,-34,-34,-12,-13,-15,]),'EQUALTO':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,57,59,60,61,63,64,68,],[-34,-3,-4,-5,28,-7,-9,-10,-11,-34,-34,-34,-31,-32,-34,-34,-34,-17,-18,-20,-2,-34,-34,-34,-34,-34,-34,-34,28,-33,28,28,-34,-34,28,28,28,28,28,28,28,28,28,28,-28,-29,28,28,-34,-34,-19,-28,-14,-16,-34,-34,-12,-13,-15,]),'GREATERTHAN':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,57,59,60,61,63,64,68,],[-34,-3,-4,-5,29,-7,-9,-10,-11,-34,-34,-34,-31,-32,-34,-34,-34,-17,-18,-20,-2,-34,-34,-34,-34,-34,-34,-34,29,-33,29,29,-34,-34,29,29,29,29,29,29,29,29,29,29,-28,-29,29,29,-34,-34,-19,-28,-14,-16,-34,-34,-12,-13,-15,]),'LESSTHAN':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,57,59,60,61,63,64,68,],[-34,-3,-4,-5,30,-7,-9,-10,-11,-34,-34,-34,-31,-32,-34,-34,-34,-17,-18,-20,-2,-34,-34,-34,-34,-34,-34,-34,30,-33,30,30,-34,-34,30,30,30,30,30,30,30,30,30,30,-28,-29,30,30,-34,-34,-19,-28,-14,-16,-34,-34,-12,-13,-15,]),'ELSE':([3,4,5,6,7,8,9,10,13,14,15,20,21,22,23,24,25,26,27,28,29,30,32,34,40,41,42,43,44,45,46,47,48,51,53,54,56,57,59,60,61,63,64,68,],[-3,-4,-5,-6,-7,-9,-10,-11,-34,-31,-32,-17,-18,-20,-2,-34,-34,-34,-34,-34,-34,-34,-33,-30,-21,-22,-23,-24,-25,-26,-27,-28,-29,-34,-34,-19,61,-14,-16,-34,-34,-12,-13,-15,]),'RPAREN':([11,13,14,15,20,21,22,24,25,26,27,28,29,30,31,32,34,35,36,40,41,42,43,44,45,46,47,48,49,50,],[-34,-34,-31,-32,-17,-18,-20,-34,-34,-34,-34,-34,-34,-34,47,-33,-30,-34,-34,-21,-22,-23,-24,-25,-26,-27,-28,-29,54,55,]),'COLON':([13,14,15,17,19,20,21,22,24,25,26,27,28,29,30,32,34,37,39,40,41,42,43,44,45,46,47,48,55,],[-34,-31,-32,-34,-34,-17,-18,-20,-34,-34,-34,-34,-34,-34,-34,-33,-30,51,53,-21,-22,-23,-24,-25,-26,-27,-28,-29,60,]),'IN':([13,14,15,18,20,21,22,24,25,26,27,28,29,30,32,34,38,40,41,42,43,44,45,46,47,48,],[-34,-31,-32,-34,-17,-18,-20,-34,-34,-34,-34,-34,-34,-34,-33,-30,52,-21,-22,-23,-24,-25,-26,-27,-28,-29,]),'RULE_OPEN':([52,],[58,]),'RANGE':([58,],[62,]),'COMMA':([65,],[66,]),'RULE_CLOSE':([67,],[68,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'newCode':([0,],[1,]),'statements':([0,3,51,53,60,61,],[2,23,56,59,63,64,]),'statement':([0,3,51,53,60,61,],[3,3,3,3,3,3,]),'empty':([0,3,11,12,13,17,18,19,24,25,26,27,28,29,30,35,36,51,53,60,61,],[4,4,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,4,4,4,4,]),'conditional':([0,3,51,53,60,61,],[5,5,5,5,5,5,]),'expression':([0,3,11,12,13,17,18,19,24,25,26,27,28,29,30,35,36,51,53,60,61,],[6,6,31,33,34,37,38,39,40,41,42,43,44,45,46,49,50,6,6,6,6,]),'print_statement':([0,3,51,53,60,61,],[7,7,7,7,7,7,]),'inline_if_statement':([0,3,51,53,60,61,],[8,8,8,8,8,8,]),'for_statement':([0,3,51,53,60,61,],[9,9,9,9,9,9,]),'while_statement':([0,3,51,53,60,61,],[10,10,10,10,10,10,]),'bool':([0,3,11,12,13,17,18,19,24,25,26,27,28,29,30,35,36,51,53,60,61,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'digit':([0,3,11,12,13,17,18,19,24,25,26,27,28,29,30,35,36,51,53,60,61,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'range_expression':([52,],[57,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> newCode","S'",1,None,None,None),
  ('newCode -> statements','newCode',1,'p_newCode','newParser.py',19),
  ('statements -> statement statements','statements',2,'p_statements','newParser.py',25),
  ('statements -> statement','statements',1,'p_statements','newParser.py',26),
  ('statements -> empty','statements',1,'p_statements','newParser.py',27),
  ('statement -> conditional','statement',1,'p_statement','newParser.py',41),
  ('statement -> expression','statement',1,'p_statement','newParser.py',42),
  ('statement -> print_statement','statement',1,'p_statement','newParser.py',43),
  ('statement -> empty','statement',1,'p_statement','newParser.py',44),
  ('conditional -> inline_if_statement','conditional',1,'p_conditional','newParser.py',52),
  ('conditional -> for_statement','conditional',1,'p_conditional','newParser.py',54),
  ('conditional -> while_statement','conditional',1,'p_conditional','newParser.py',55),
  ('inline_if_statement -> IF LPAREN expression RPAREN COLON statements','inline_if_statement',6,'p_inline_if_statement','newParser.py',61),
  ('inline_if_statement -> IF expression COLON statements ELSE statements','inline_if_statement',6,'p_inline_if_statement','newParser.py',62),
  ('for_statement -> FOR expression IN range_expression','for_statement',4,'p_for_statement','newParser.py',85),
  ('range_expression -> RULE_OPEN RANGE NUMBER COMMA NUMBER RULE_CLOSE','range_expression',6,'p_range_expression','newParser.py',92),
  ('while_statement -> WHILE expression COLON statements','while_statement',4,'p_while_statement','newParser.py',101),
  ('bool -> TRUE','bool',1,'p_bool','newParser.py',108),
  ('bool -> FALSE','bool',1,'p_bool','newParser.py',109),
  ('print_statement -> PRINT LPAREN expression RPAREN','print_statement',4,'p_print_statement','newParser.py',116),
  ('digit -> NUMBER','digit',1,'p_digit','newParser.py',123),
  ('expression -> expression PLUS expression','expression',3,'p_expression','newParser.py',130),
  ('expression -> expression MINUS expression','expression',3,'p_expression','newParser.py',131),
  ('expression -> expression TIMES expression','expression',3,'p_expression','newParser.py',132),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','newParser.py',133),
  ('expression -> expression EQUALTO expression','expression',3,'p_expression','newParser.py',134),
  ('expression -> expression GREATERTHAN expression','expression',3,'p_expression','newParser.py',135),
  ('expression -> expression LESSTHAN expression','expression',3,'p_expression','newParser.py',136),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','newParser.py',137),
  ('expression -> DOUBLEQUOTES expression DOUBLEQUOTES','expression',3,'p_expression','newParser.py',138),
  ('expression -> IDENTIFIER expression','expression',2,'p_expression','newParser.py',139),
  ('expression -> bool','expression',1,'p_expression','newParser.py',140),
  ('expression -> digit','expression',1,'p_expression','newParser.py',141),
  ('expression -> empty','expression',1,'p_expression','newParser.py',142),
  ('empty -> <empty>','empty',0,'p_empty','newParser.py',153),
]

Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BREAK
    Bool
    CASE
    CLASS
    COMMENTS
    DEF
    DIVIDEEQUAL
    DO
    DOUBLEQUOTES
    Double
    ELIF
    EQUALEQUAL
    FINALLY
    FUNC
    Float
    GLOBAL
    GREATEREQUAL
    GREATERTHAN
    IMPORT
    INT
    IS
    LCURVEDBRACE
    LESSEQUAL
    LESSTHAN
    LSQUAREDBRACKET
    MAIN
    MINUSEQUAL
    NOT
    NOTEQUAL
    OR
    PLUSEQUAL
    RCURVEDBRACE
    RESERVEDWORD
    RETURN
    RSQUAREDBRACKET
    RULE_CLOSE
    RULE_OPEN
    SINGLEQUOTES
    STRING
    SWITCH
    Str
    THEN
    TIMESEQUAL
    UNTIL

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statement statements
Rule 2     statements -> statement
Rule 3     statements -> empty
Rule 4     statement -> conditional
Rule 5     statement -> expression
Rule 6     statement -> assignment_statement
Rule 7     statement -> function_call
Rule 8     statement -> print_statement
Rule 9     statement -> empty
Rule 10    conditional -> inline_if_statement
Rule 11    conditional -> for_statement
Rule 12    conditional -> while_statement
Rule 13    inline_if_statement -> IF expression COLON statements
Rule 14    inline_if_statement -> IF expression COLON statements ELSE statements
Rule 15    for_statement -> FOR expression IN range_expression
Rule 16    range_expression -> RANGE expression COMMA expression
Rule 17    while_statement -> WHILE expression COLON statements
Rule 18    bool -> TRUE
Rule 19    bool -> FALSE
Rule 20    print_statement -> PRINT LPAREN expression RPAREN
Rule 21    expression -> expression PLUS expression
Rule 22    expression -> expression MINUS expression
Rule 23    expression -> expression TIMES expression
Rule 24    expression -> expression DIVIDE expression
Rule 25    expression -> expression EQUALTO expression
Rule 26    expression -> LPAREN expression RPAREN
Rule 27    expression -> INTEGER
Rule 28    expression -> FLOAT
Rule 29    expression -> IDENTIFIER
Rule 30    expression -> bool
Rule 31    assignment_statement -> IDENTIFIER EQUAL expression
Rule 32    function_call -> IDENTIFIER LPAREN argument_list RPAREN
Rule 33    argument_list -> expression
Rule 34    argument_list -> argument_list COMMA expression
Rule 35    empty -> <empty>

Terminals, with rules where they appear

AND                  : 
BREAK                : 
Bool                 : 
CASE                 : 
CLASS                : 
COLON                : 13 14 17
COMMA                : 16 34
COMMENTS             : 
DEF                  : 
DIVIDE               : 24
DIVIDEEQUAL          : 
DO                   : 
DOUBLEQUOTES         : 
Double               : 
ELIF                 : 
ELSE                 : 14
EQUAL                : 31
EQUALEQUAL           : 
EQUALTO              : 25
FALSE                : 19
FINALLY              : 
FLOAT                : 28
FOR                  : 15
FUNC                 : 
Float                : 
GLOBAL               : 
GREATEREQUAL         : 
GREATERTHAN          : 
IDENTIFIER           : 29 31 32
IF                   : 13 14
IMPORT               : 
IN                   : 15
INT                  : 
INTEGER              : 27
IS                   : 
LCURVEDBRACE         : 
LESSEQUAL            : 
LESSTHAN             : 
LPAREN               : 20 26 32
LSQUAREDBRACKET      : 
MAIN                 : 
MINUS                : 22
MINUSEQUAL           : 
NOT                  : 
NOTEQUAL             : 
OR                   : 
PLUS                 : 21
PLUSEQUAL            : 
PRINT                : 20
RANGE                : 16
RCURVEDBRACE         : 
RESERVEDWORD         : 
RETURN               : 
RPAREN               : 20 26 32
RSQUAREDBRACKET      : 
RULE_CLOSE           : 
RULE_OPEN            : 
SINGLEQUOTES         : 
STRING               : 
SWITCH               : 
Str                  : 
THEN                 : 
TIMES                : 23
TIMESEQUAL           : 
TRUE                 : 18
UNTIL                : 
WHILE                : 17
error                : 

Nonterminals, with rules where they appear

argument_list        : 32 34
assignment_statement : 6
bool                 : 30
conditional          : 4
empty                : 3 9
expression           : 5 13 14 15 16 16 17 20 21 21 22 22 23 23 24 24 25 25 26 31 33 34
for_statement        : 11
function_call        : 7
inline_if_statement  : 10
print_statement      : 8
range_expression     : 15
statement            : 1 2
statements           : 1 13 14 14 17 0
while_statement      : 12

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statement statements
    (2) statements -> . statement
    (3) statements -> . empty
    (4) statement -> . conditional
    (5) statement -> . expression
    (6) statement -> . assignment_statement
    (7) statement -> . function_call
    (8) statement -> . print_statement
    (9) statement -> . empty
    (35) empty -> .
    (10) conditional -> . inline_if_statement
    (11) conditional -> . for_statement
    (12) conditional -> . while_statement
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression EQUALTO expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . INTEGER
    (28) expression -> . FLOAT
    (29) expression -> . IDENTIFIER
    (30) expression -> . bool
    (31) assignment_statement -> . IDENTIFIER EQUAL expression
    (32) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (20) print_statement -> . PRINT LPAREN expression RPAREN
    (13) inline_if_statement -> . IF expression COLON statements
    (14) inline_if_statement -> . IF expression COLON statements ELSE statements
    (15) for_statement -> . FOR expression IN range_expression
    (17) while_statement -> . WHILE expression COLON statements
    (18) bool -> . TRUE
    (19) bool -> . FALSE

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 35 (empty -> .)
    LPAREN          shift and go to state 12
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 14
    IDENTIFIER      shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22

  ! LPAREN          [ reduce using rule 35 (empty -> .) ]
  ! INTEGER         [ reduce using rule 35 (empty -> .) ]
  ! FLOAT           [ reduce using rule 35 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 35 (empty -> .) ]
  ! PRINT           [ reduce using rule 35 (empty -> .) ]
  ! IF              [ reduce using rule 35 (empty -> .) ]
  ! FOR             [ reduce using rule 35 (empty -> .) ]
  ! WHILE           [ reduce using rule 35 (empty -> .) ]
  ! TRUE            [ reduce using rule 35 (empty -> .) ]
  ! FALSE           [ reduce using rule 35 (empty -> .) ]

    statements                     shift and go to state 1
    statement                      shift and go to state 2
    empty                          shift and go to state 3
    conditional                    shift and go to state 4
    expression                     shift and go to state 5
    assignment_statement           shift and go to state 6
    function_call                  shift and go to state 7
    print_statement                shift and go to state 8
    inline_if_statement            shift and go to state 9
    for_statement                  shift and go to state 10
    while_statement                shift and go to state 11
    bool                           shift and go to state 16

state 1

    (0) S' -> statements .



state 2

    (1) statements -> statement . statements
    (2) statements -> statement .
    (1) statements -> . statement statements
    (2) statements -> . statement
    (3) statements -> . empty
    (4) statement -> . conditional
    (5) statement -> . expression
    (6) statement -> . assignment_statement
    (7) statement -> . function_call
    (8) statement -> . print_statement
    (9) statement -> . empty
    (35) empty -> .
    (10) conditional -> . inline_if_statement
    (11) conditional -> . for_statement
    (12) conditional -> . while_statement
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression EQUALTO expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . INTEGER
    (28) expression -> . FLOAT
    (29) expression -> . IDENTIFIER
    (30) expression -> . bool
    (31) assignment_statement -> . IDENTIFIER EQUAL expression
    (32) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (20) print_statement -> . PRINT LPAREN expression RPAREN
    (13) inline_if_statement -> . IF expression COLON statements
    (14) inline_if_statement -> . IF expression COLON statements ELSE statements
    (15) for_statement -> . FOR expression IN range_expression
    (17) while_statement -> . WHILE expression COLON statements
    (18) bool -> . TRUE
    (19) bool -> . FALSE

  ! reduce/reduce conflict for $end resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for FLOAT resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for PRINT resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for IF resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for FOR resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 2 (statements -> statement .)
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 2 (statements -> statement .)
    ELSE            reduce using rule 2 (statements -> statement .)
    LPAREN          shift and go to state 12
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 14
    IDENTIFIER      shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22

  ! LPAREN          [ reduce using rule 2 (statements -> statement .) ]
  ! INTEGER         [ reduce using rule 2 (statements -> statement .) ]
  ! FLOAT           [ reduce using rule 2 (statements -> statement .) ]
  ! IDENTIFIER      [ reduce using rule 2 (statements -> statement .) ]
  ! PRINT           [ reduce using rule 2 (statements -> statement .) ]
  ! IF              [ reduce using rule 2 (statements -> statement .) ]
  ! FOR             [ reduce using rule 2 (statements -> statement .) ]
  ! WHILE           [ reduce using rule 2 (statements -> statement .) ]
  ! TRUE            [ reduce using rule 2 (statements -> statement .) ]
  ! FALSE           [ reduce using rule 2 (statements -> statement .) ]
  ! $end            [ reduce using rule 35 (empty -> .) ]
  ! ELSE            [ reduce using rule 35 (empty -> .) ]
  ! LPAREN          [ reduce using rule 35 (empty -> .) ]
  ! INTEGER         [ reduce using rule 35 (empty -> .) ]
  ! FLOAT           [ reduce using rule 35 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 35 (empty -> .) ]
  ! PRINT           [ reduce using rule 35 (empty -> .) ]
  ! IF              [ reduce using rule 35 (empty -> .) ]
  ! FOR             [ reduce using rule 35 (empty -> .) ]
  ! WHILE           [ reduce using rule 35 (empty -> .) ]
  ! TRUE            [ reduce using rule 35 (empty -> .) ]
  ! FALSE           [ reduce using rule 35 (empty -> .) ]

    statement                      shift and go to state 2
    statements                     shift and go to state 23
    empty                          shift and go to state 3
    conditional                    shift and go to state 4
    expression                     shift and go to state 5
    assignment_statement           shift and go to state 6
    function_call                  shift and go to state 7
    print_statement                shift and go to state 8
    inline_if_statement            shift and go to state 9
    for_statement                  shift and go to state 10
    while_statement                shift and go to state 11
    bool                           shift and go to state 16

state 3

    (3) statements -> empty .
    (9) statement -> empty .

  ! reduce/reduce conflict for LPAREN resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for INTEGER resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for PRINT resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for TRUE resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for FALSE resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for ELSE resolved using rule 3 (statements -> empty .)
    $end            reduce using rule 3 (statements -> empty .)
    ELSE            reduce using rule 3 (statements -> empty .)
    LPAREN          reduce using rule 3 (statements -> empty .)
    INTEGER         reduce using rule 3 (statements -> empty .)
    FLOAT           reduce using rule 3 (statements -> empty .)
    IDENTIFIER      reduce using rule 3 (statements -> empty .)
    PRINT           reduce using rule 3 (statements -> empty .)
    IF              reduce using rule 3 (statements -> empty .)
    FOR             reduce using rule 3 (statements -> empty .)
    WHILE           reduce using rule 3 (statements -> empty .)
    TRUE            reduce using rule 3 (statements -> empty .)
    FALSE           reduce using rule 3 (statements -> empty .)

  ! LPAREN          [ reduce using rule 9 (statement -> empty .) ]
  ! INTEGER         [ reduce using rule 9 (statement -> empty .) ]
  ! FLOAT           [ reduce using rule 9 (statement -> empty .) ]
  ! IDENTIFIER      [ reduce using rule 9 (statement -> empty .) ]
  ! PRINT           [ reduce using rule 9 (statement -> empty .) ]
  ! IF              [ reduce using rule 9 (statement -> empty .) ]
  ! FOR             [ reduce using rule 9 (statement -> empty .) ]
  ! WHILE           [ reduce using rule 9 (statement -> empty .) ]
  ! TRUE            [ reduce using rule 9 (statement -> empty .) ]
  ! FALSE           [ reduce using rule 9 (statement -> empty .) ]
  ! $end            [ reduce using rule 9 (statement -> empty .) ]
  ! ELSE            [ reduce using rule 9 (statement -> empty .) ]


state 4

    (4) statement -> conditional .

    LPAREN          reduce using rule 4 (statement -> conditional .)
    INTEGER         reduce using rule 4 (statement -> conditional .)
    FLOAT           reduce using rule 4 (statement -> conditional .)
    IDENTIFIER      reduce using rule 4 (statement -> conditional .)
    PRINT           reduce using rule 4 (statement -> conditional .)
    IF              reduce using rule 4 (statement -> conditional .)
    FOR             reduce using rule 4 (statement -> conditional .)
    WHILE           reduce using rule 4 (statement -> conditional .)
    TRUE            reduce using rule 4 (statement -> conditional .)
    FALSE           reduce using rule 4 (statement -> conditional .)
    $end            reduce using rule 4 (statement -> conditional .)
    ELSE            reduce using rule 4 (statement -> conditional .)


state 5

    (5) statement -> expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . EQUALTO expression

    LPAREN          reduce using rule 5 (statement -> expression .)
    INTEGER         reduce using rule 5 (statement -> expression .)
    FLOAT           reduce using rule 5 (statement -> expression .)
    IDENTIFIER      reduce using rule 5 (statement -> expression .)
    PRINT           reduce using rule 5 (statement -> expression .)
    IF              reduce using rule 5 (statement -> expression .)
    FOR             reduce using rule 5 (statement -> expression .)
    WHILE           reduce using rule 5 (statement -> expression .)
    TRUE            reduce using rule 5 (statement -> expression .)
    FALSE           reduce using rule 5 (statement -> expression .)
    $end            reduce using rule 5 (statement -> expression .)
    ELSE            reduce using rule 5 (statement -> expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    EQUALTO         shift and go to state 28


state 6

    (6) statement -> assignment_statement .

    LPAREN          reduce using rule 6 (statement -> assignment_statement .)
    INTEGER         reduce using rule 6 (statement -> assignment_statement .)
    FLOAT           reduce using rule 6 (statement -> assignment_statement .)
    IDENTIFIER      reduce using rule 6 (statement -> assignment_statement .)
    PRINT           reduce using rule 6 (statement -> assignment_statement .)
    IF              reduce using rule 6 (statement -> assignment_statement .)
    FOR             reduce using rule 6 (statement -> assignment_statement .)
    WHILE           reduce using rule 6 (statement -> assignment_statement .)
    TRUE            reduce using rule 6 (statement -> assignment_statement .)
    FALSE           reduce using rule 6 (statement -> assignment_statement .)
    $end            reduce using rule 6 (statement -> assignment_statement .)
    ELSE            reduce using rule 6 (statement -> assignment_statement .)


state 7

    (7) statement -> function_call .

    LPAREN          reduce using rule 7 (statement -> function_call .)
    INTEGER         reduce using rule 7 (statement -> function_call .)
    FLOAT           reduce using rule 7 (statement -> function_call .)
    IDENTIFIER      reduce using rule 7 (statement -> function_call .)
    PRINT           reduce using rule 7 (statement -> function_call .)
    IF              reduce using rule 7 (statement -> function_call .)
    FOR             reduce using rule 7 (statement -> function_call .)
    WHILE           reduce using rule 7 (statement -> function_call .)
    TRUE            reduce using rule 7 (statement -> function_call .)
    FALSE           reduce using rule 7 (statement -> function_call .)
    $end            reduce using rule 7 (statement -> function_call .)
    ELSE            reduce using rule 7 (statement -> function_call .)


state 8

    (8) statement -> print_statement .

    LPAREN          reduce using rule 8 (statement -> print_statement .)
    INTEGER         reduce using rule 8 (statement -> print_statement .)
    FLOAT           reduce using rule 8 (statement -> print_statement .)
    IDENTIFIER      reduce using rule 8 (statement -> print_statement .)
    PRINT           reduce using rule 8 (statement -> print_statement .)
    IF              reduce using rule 8 (statement -> print_statement .)
    FOR             reduce using rule 8 (statement -> print_statement .)
    WHILE           reduce using rule 8 (statement -> print_statement .)
    TRUE            reduce using rule 8 (statement -> print_statement .)
    FALSE           reduce using rule 8 (statement -> print_statement .)
    $end            reduce using rule 8 (statement -> print_statement .)
    ELSE            reduce using rule 8 (statement -> print_statement .)


state 9

    (10) conditional -> inline_if_statement .

    LPAREN          reduce using rule 10 (conditional -> inline_if_statement .)
    INTEGER         reduce using rule 10 (conditional -> inline_if_statement .)
    FLOAT           reduce using rule 10 (conditional -> inline_if_statement .)
    IDENTIFIER      reduce using rule 10 (conditional -> inline_if_statement .)
    PRINT           reduce using rule 10 (conditional -> inline_if_statement .)
    IF              reduce using rule 10 (conditional -> inline_if_statement .)
    FOR             reduce using rule 10 (conditional -> inline_if_statement .)
    WHILE           reduce using rule 10 (conditional -> inline_if_statement .)
    TRUE            reduce using rule 10 (conditional -> inline_if_statement .)
    FALSE           reduce using rule 10 (conditional -> inline_if_statement .)
    $end            reduce using rule 10 (conditional -> inline_if_statement .)
    ELSE            reduce using rule 10 (conditional -> inline_if_statement .)


state 10

    (11) conditional -> for_statement .

    LPAREN          reduce using rule 11 (conditional -> for_statement .)
    INTEGER         reduce using rule 11 (conditional -> for_statement .)
    FLOAT           reduce using rule 11 (conditional -> for_statement .)
    IDENTIFIER      reduce using rule 11 (conditional -> for_statement .)
    PRINT           reduce using rule 11 (conditional -> for_statement .)
    IF              reduce using rule 11 (conditional -> for_statement .)
    FOR             reduce using rule 11 (conditional -> for_statement .)
    WHILE           reduce using rule 11 (conditional -> for_statement .)
    TRUE            reduce using rule 11 (conditional -> for_statement .)
    FALSE           reduce using rule 11 (conditional -> for_statement .)
    $end            reduce using rule 11 (conditional -> for_statement .)
    ELSE            reduce using rule 11 (conditional -> for_statement .)


state 11

    (12) conditional -> while_statement .

    LPAREN          reduce using rule 12 (conditional -> while_statement .)
    INTEGER         reduce using rule 12 (conditional -> while_statement .)
    FLOAT           reduce using rule 12 (conditional -> while_statement .)
    IDENTIFIER      reduce using rule 12 (conditional -> while_statement .)
    PRINT           reduce using rule 12 (conditional -> while_statement .)
    IF              reduce using rule 12 (conditional -> while_statement .)
    FOR             reduce using rule 12 (conditional -> while_statement .)
    WHILE           reduce using rule 12 (conditional -> while_statement .)
    TRUE            reduce using rule 12 (conditional -> while_statement .)
    FALSE           reduce using rule 12 (conditional -> while_statement .)
    $end            reduce using rule 12 (conditional -> while_statement .)
    ELSE            reduce using rule 12 (conditional -> while_statement .)


state 12

    (26) expression -> LPAREN . expression RPAREN
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression EQUALTO expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . INTEGER
    (28) expression -> . FLOAT
    (29) expression -> . IDENTIFIER
    (30) expression -> . bool
    (18) bool -> . TRUE
    (19) bool -> . FALSE

    LPAREN          shift and go to state 12
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 14
    IDENTIFIER      shift and go to state 30
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22

    expression                     shift and go to state 29
    bool                           shift and go to state 16

state 13

    (27) expression -> INTEGER .

    PLUS            reduce using rule 27 (expression -> INTEGER .)
    MINUS           reduce using rule 27 (expression -> INTEGER .)
    TIMES           reduce using rule 27 (expression -> INTEGER .)
    DIVIDE          reduce using rule 27 (expression -> INTEGER .)
    EQUALTO         reduce using rule 27 (expression -> INTEGER .)
    LPAREN          reduce using rule 27 (expression -> INTEGER .)
    INTEGER         reduce using rule 27 (expression -> INTEGER .)
    FLOAT           reduce using rule 27 (expression -> INTEGER .)
    IDENTIFIER      reduce using rule 27 (expression -> INTEGER .)
    PRINT           reduce using rule 27 (expression -> INTEGER .)
    IF              reduce using rule 27 (expression -> INTEGER .)
    FOR             reduce using rule 27 (expression -> INTEGER .)
    WHILE           reduce using rule 27 (expression -> INTEGER .)
    TRUE            reduce using rule 27 (expression -> INTEGER .)
    FALSE           reduce using rule 27 (expression -> INTEGER .)
    $end            reduce using rule 27 (expression -> INTEGER .)
    ELSE            reduce using rule 27 (expression -> INTEGER .)
    RPAREN          reduce using rule 27 (expression -> INTEGER .)
    COLON           reduce using rule 27 (expression -> INTEGER .)
    IN              reduce using rule 27 (expression -> INTEGER .)
    COMMA           reduce using rule 27 (expression -> INTEGER .)


state 14

    (28) expression -> FLOAT .

    PLUS            reduce using rule 28 (expression -> FLOAT .)
    MINUS           reduce using rule 28 (expression -> FLOAT .)
    TIMES           reduce using rule 28 (expression -> FLOAT .)
    DIVIDE          reduce using rule 28 (expression -> FLOAT .)
    EQUALTO         reduce using rule 28 (expression -> FLOAT .)
    LPAREN          reduce using rule 28 (expression -> FLOAT .)
    INTEGER         reduce using rule 28 (expression -> FLOAT .)
    FLOAT           reduce using rule 28 (expression -> FLOAT .)
    IDENTIFIER      reduce using rule 28 (expression -> FLOAT .)
    PRINT           reduce using rule 28 (expression -> FLOAT .)
    IF              reduce using rule 28 (expression -> FLOAT .)
    FOR             reduce using rule 28 (expression -> FLOAT .)
    WHILE           reduce using rule 28 (expression -> FLOAT .)
    TRUE            reduce using rule 28 (expression -> FLOAT .)
    FALSE           reduce using rule 28 (expression -> FLOAT .)
    $end            reduce using rule 28 (expression -> FLOAT .)
    ELSE            reduce using rule 28 (expression -> FLOAT .)
    RPAREN          reduce using rule 28 (expression -> FLOAT .)
    COLON           reduce using rule 28 (expression -> FLOAT .)
    IN              reduce using rule 28 (expression -> FLOAT .)
    COMMA           reduce using rule 28 (expression -> FLOAT .)


state 15

    (29) expression -> IDENTIFIER .
    (31) assignment_statement -> IDENTIFIER . EQUAL expression
    (32) function_call -> IDENTIFIER . LPAREN argument_list RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    PLUS            reduce using rule 29 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 29 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 29 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 29 (expression -> IDENTIFIER .)
    EQUALTO         reduce using rule 29 (expression -> IDENTIFIER .)
    INTEGER         reduce using rule 29 (expression -> IDENTIFIER .)
    FLOAT           reduce using rule 29 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 29 (expression -> IDENTIFIER .)
    PRINT           reduce using rule 29 (expression -> IDENTIFIER .)
    IF              reduce using rule 29 (expression -> IDENTIFIER .)
    FOR             reduce using rule 29 (expression -> IDENTIFIER .)
    WHILE           reduce using rule 29 (expression -> IDENTIFIER .)
    TRUE            reduce using rule 29 (expression -> IDENTIFIER .)
    FALSE           reduce using rule 29 (expression -> IDENTIFIER .)
    $end            reduce using rule 29 (expression -> IDENTIFIER .)
    ELSE            reduce using rule 29 (expression -> IDENTIFIER .)
    EQUAL           shift and go to state 31
    LPAREN          shift and go to state 32

  ! LPAREN          [ reduce using rule 29 (expression -> IDENTIFIER .) ]


state 16

    (30) expression -> bool .

    PLUS            reduce using rule 30 (expression -> bool .)
    MINUS           reduce using rule 30 (expression -> bool .)
    TIMES           reduce using rule 30 (expression -> bool .)
    DIVIDE          reduce using rule 30 (expression -> bool .)
    EQUALTO         reduce using rule 30 (expression -> bool .)
    LPAREN          reduce using rule 30 (expression -> bool .)
    INTEGER         reduce using rule 30 (expression -> bool .)
    FLOAT           reduce using rule 30 (expression -> bool .)
    IDENTIFIER      reduce using rule 30 (expression -> bool .)
    PRINT           reduce using rule 30 (expression -> bool .)
    IF              reduce using rule 30 (expression -> bool .)
    FOR             reduce using rule 30 (expression -> bool .)
    WHILE           reduce using rule 30 (expression -> bool .)
    TRUE            reduce using rule 30 (expression -> bool .)
    FALSE           reduce using rule 30 (expression -> bool .)
    $end            reduce using rule 30 (expression -> bool .)
    ELSE            reduce using rule 30 (expression -> bool .)
    RPAREN          reduce using rule 30 (expression -> bool .)
    COLON           reduce using rule 30 (expression -> bool .)
    IN              reduce using rule 30 (expression -> bool .)
    COMMA           reduce using rule 30 (expression -> bool .)


state 17

    (20) print_statement -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 33


state 18

    (13) inline_if_statement -> IF . expression COLON statements
    (14) inline_if_statement -> IF . expression COLON statements ELSE statements
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression EQUALTO expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . INTEGER
    (28) expression -> . FLOAT
    (29) expression -> . IDENTIFIER
    (30) expression -> . bool
    (18) bool -> . TRUE
    (19) bool -> . FALSE

    LPAREN          shift and go to state 12
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 14
    IDENTIFIER      shift and go to state 30
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22

    expression                     shift and go to state 34
    bool                           shift and go to state 16

state 19

    (15) for_statement -> FOR . expression IN range_expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression EQUALTO expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . INTEGER
    (28) expression -> . FLOAT
    (29) expression -> . IDENTIFIER
    (30) expression -> . bool
    (18) bool -> . TRUE
    (19) bool -> . FALSE

    LPAREN          shift and go to state 12
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 14
    IDENTIFIER      shift and go to state 30
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22

    expression                     shift and go to state 35
    bool                           shift and go to state 16

state 20

    (17) while_statement -> WHILE . expression COLON statements
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression EQUALTO expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . INTEGER
    (28) expression -> . FLOAT
    (29) expression -> . IDENTIFIER
    (30) expression -> . bool
    (18) bool -> . TRUE
    (19) bool -> . FALSE

    LPAREN          shift and go to state 12
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 14
    IDENTIFIER      shift and go to state 30
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22

    expression                     shift and go to state 36
    bool                           shift and go to state 16

state 21

    (18) bool -> TRUE .

    PLUS            reduce using rule 18 (bool -> TRUE .)
    MINUS           reduce using rule 18 (bool -> TRUE .)
    TIMES           reduce using rule 18 (bool -> TRUE .)
    DIVIDE          reduce using rule 18 (bool -> TRUE .)
    EQUALTO         reduce using rule 18 (bool -> TRUE .)
    LPAREN          reduce using rule 18 (bool -> TRUE .)
    INTEGER         reduce using rule 18 (bool -> TRUE .)
    FLOAT           reduce using rule 18 (bool -> TRUE .)
    IDENTIFIER      reduce using rule 18 (bool -> TRUE .)
    PRINT           reduce using rule 18 (bool -> TRUE .)
    IF              reduce using rule 18 (bool -> TRUE .)
    FOR             reduce using rule 18 (bool -> TRUE .)
    WHILE           reduce using rule 18 (bool -> TRUE .)
    TRUE            reduce using rule 18 (bool -> TRUE .)
    FALSE           reduce using rule 18 (bool -> TRUE .)
    $end            reduce using rule 18 (bool -> TRUE .)
    ELSE            reduce using rule 18 (bool -> TRUE .)
    RPAREN          reduce using rule 18 (bool -> TRUE .)
    COLON           reduce using rule 18 (bool -> TRUE .)
    IN              reduce using rule 18 (bool -> TRUE .)
    COMMA           reduce using rule 18 (bool -> TRUE .)


state 22

    (19) bool -> FALSE .

    PLUS            reduce using rule 19 (bool -> FALSE .)
    MINUS           reduce using rule 19 (bool -> FALSE .)
    TIMES           reduce using rule 19 (bool -> FALSE .)
    DIVIDE          reduce using rule 19 (bool -> FALSE .)
    EQUALTO         reduce using rule 19 (bool -> FALSE .)
    LPAREN          reduce using rule 19 (bool -> FALSE .)
    INTEGER         reduce using rule 19 (bool -> FALSE .)
    FLOAT           reduce using rule 19 (bool -> FALSE .)
    IDENTIFIER      reduce using rule 19 (bool -> FALSE .)
    PRINT           reduce using rule 19 (bool -> FALSE .)
    IF              reduce using rule 19 (bool -> FALSE .)
    FOR             reduce using rule 19 (bool -> FALSE .)
    WHILE           reduce using rule 19 (bool -> FALSE .)
    TRUE            reduce using rule 19 (bool -> FALSE .)
    FALSE           reduce using rule 19 (bool -> FALSE .)
    $end            reduce using rule 19 (bool -> FALSE .)
    ELSE            reduce using rule 19 (bool -> FALSE .)
    RPAREN          reduce using rule 19 (bool -> FALSE .)
    COLON           reduce using rule 19 (bool -> FALSE .)
    IN              reduce using rule 19 (bool -> FALSE .)
    COMMA           reduce using rule 19 (bool -> FALSE .)


state 23

    (1) statements -> statement statements .

    $end            reduce using rule 1 (statements -> statement statements .)
    ELSE            reduce using rule 1 (statements -> statement statements .)
    LPAREN          reduce using rule 1 (statements -> statement statements .)
    INTEGER         reduce using rule 1 (statements -> statement statements .)
    FLOAT           reduce using rule 1 (statements -> statement statements .)
    IDENTIFIER      reduce using rule 1 (statements -> statement statements .)
    PRINT           reduce using rule 1 (statements -> statement statements .)
    IF              reduce using rule 1 (statements -> statement statements .)
    FOR             reduce using rule 1 (statements -> statement statements .)
    WHILE           reduce using rule 1 (statements -> statement statements .)
    TRUE            reduce using rule 1 (statements -> statement statements .)
    FALSE           reduce using rule 1 (statements -> statement statements .)


state 24

    (21) expression -> expression PLUS . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression EQUALTO expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . INTEGER
    (28) expression -> . FLOAT
    (29) expression -> . IDENTIFIER
    (30) expression -> . bool
    (18) bool -> . TRUE
    (19) bool -> . FALSE

    LPAREN          shift and go to state 12
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 14
    IDENTIFIER      shift and go to state 30
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22

    expression                     shift and go to state 37
    bool                           shift and go to state 16

state 25

    (22) expression -> expression MINUS . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression EQUALTO expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . INTEGER
    (28) expression -> . FLOAT
    (29) expression -> . IDENTIFIER
    (30) expression -> . bool
    (18) bool -> . TRUE
    (19) bool -> . FALSE

    LPAREN          shift and go to state 12
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 14
    IDENTIFIER      shift and go to state 30
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22

    expression                     shift and go to state 38
    bool                           shift and go to state 16

state 26

    (23) expression -> expression TIMES . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression EQUALTO expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . INTEGER
    (28) expression -> . FLOAT
    (29) expression -> . IDENTIFIER
    (30) expression -> . bool
    (18) bool -> . TRUE
    (19) bool -> . FALSE

    LPAREN          shift and go to state 12
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 14
    IDENTIFIER      shift and go to state 30
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22

    expression                     shift and go to state 39
    bool                           shift and go to state 16

state 27

    (24) expression -> expression DIVIDE . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression EQUALTO expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . INTEGER
    (28) expression -> . FLOAT
    (29) expression -> . IDENTIFIER
    (30) expression -> . bool
    (18) bool -> . TRUE
    (19) bool -> . FALSE

    LPAREN          shift and go to state 12
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 14
    IDENTIFIER      shift and go to state 30
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22

    expression                     shift and go to state 40
    bool                           shift and go to state 16

state 28

    (25) expression -> expression EQUALTO . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression EQUALTO expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . INTEGER
    (28) expression -> . FLOAT
    (29) expression -> . IDENTIFIER
    (30) expression -> . bool
    (18) bool -> . TRUE
    (19) bool -> . FALSE

    LPAREN          shift and go to state 12
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 14
    IDENTIFIER      shift and go to state 30
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22

    expression                     shift and go to state 41
    bool                           shift and go to state 16

state 29

    (26) expression -> LPAREN expression . RPAREN
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . EQUALTO expression

    RPAREN          shift and go to state 42
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    EQUALTO         shift and go to state 28


state 30

    (29) expression -> IDENTIFIER .

    RPAREN          reduce using rule 29 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 29 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 29 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 29 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 29 (expression -> IDENTIFIER .)
    EQUALTO         reduce using rule 29 (expression -> IDENTIFIER .)
    COLON           reduce using rule 29 (expression -> IDENTIFIER .)
    IN              reduce using rule 29 (expression -> IDENTIFIER .)
    LPAREN          reduce using rule 29 (expression -> IDENTIFIER .)
    INTEGER         reduce using rule 29 (expression -> IDENTIFIER .)
    FLOAT           reduce using rule 29 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 29 (expression -> IDENTIFIER .)
    PRINT           reduce using rule 29 (expression -> IDENTIFIER .)
    IF              reduce using rule 29 (expression -> IDENTIFIER .)
    FOR             reduce using rule 29 (expression -> IDENTIFIER .)
    WHILE           reduce using rule 29 (expression -> IDENTIFIER .)
    TRUE            reduce using rule 29 (expression -> IDENTIFIER .)
    FALSE           reduce using rule 29 (expression -> IDENTIFIER .)
    $end            reduce using rule 29 (expression -> IDENTIFIER .)
    ELSE            reduce using rule 29 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 29 (expression -> IDENTIFIER .)


state 31

    (31) assignment_statement -> IDENTIFIER EQUAL . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression EQUALTO expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . INTEGER
    (28) expression -> . FLOAT
    (29) expression -> . IDENTIFIER
    (30) expression -> . bool
    (18) bool -> . TRUE
    (19) bool -> . FALSE

    LPAREN          shift and go to state 12
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 14
    IDENTIFIER      shift and go to state 30
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22

    expression                     shift and go to state 43
    bool                           shift and go to state 16

state 32

    (32) function_call -> IDENTIFIER LPAREN . argument_list RPAREN
    (33) argument_list -> . expression
    (34) argument_list -> . argument_list COMMA expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression EQUALTO expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . INTEGER
    (28) expression -> . FLOAT
    (29) expression -> . IDENTIFIER
    (30) expression -> . bool
    (18) bool -> . TRUE
    (19) bool -> . FALSE

    LPAREN          shift and go to state 12
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 14
    IDENTIFIER      shift and go to state 30
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22

    argument_list                  shift and go to state 44
    expression                     shift and go to state 45
    bool                           shift and go to state 16

state 33

    (20) print_statement -> PRINT LPAREN . expression RPAREN
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression EQUALTO expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . INTEGER
    (28) expression -> . FLOAT
    (29) expression -> . IDENTIFIER
    (30) expression -> . bool
    (18) bool -> . TRUE
    (19) bool -> . FALSE

    LPAREN          shift and go to state 12
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 14
    IDENTIFIER      shift and go to state 30
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22

    expression                     shift and go to state 46
    bool                           shift and go to state 16

state 34

    (13) inline_if_statement -> IF expression . COLON statements
    (14) inline_if_statement -> IF expression . COLON statements ELSE statements
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . EQUALTO expression

    COLON           shift and go to state 47
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    EQUALTO         shift and go to state 28


state 35

    (15) for_statement -> FOR expression . IN range_expression
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . EQUALTO expression

    IN              shift and go to state 48
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    EQUALTO         shift and go to state 28


state 36

    (17) while_statement -> WHILE expression . COLON statements
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . EQUALTO expression

    COLON           shift and go to state 49
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    EQUALTO         shift and go to state 28


state 37

    (21) expression -> expression PLUS expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . EQUALTO expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALTO resolved as shift
    LPAREN          reduce using rule 21 (expression -> expression PLUS expression .)
    INTEGER         reduce using rule 21 (expression -> expression PLUS expression .)
    FLOAT           reduce using rule 21 (expression -> expression PLUS expression .)
    IDENTIFIER      reduce using rule 21 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 21 (expression -> expression PLUS expression .)
    IF              reduce using rule 21 (expression -> expression PLUS expression .)
    FOR             reduce using rule 21 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 21 (expression -> expression PLUS expression .)
    TRUE            reduce using rule 21 (expression -> expression PLUS expression .)
    FALSE           reduce using rule 21 (expression -> expression PLUS expression .)
    $end            reduce using rule 21 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 21 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 21 (expression -> expression PLUS expression .)
    COLON           reduce using rule 21 (expression -> expression PLUS expression .)
    IN              reduce using rule 21 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 21 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    EQUALTO         shift and go to state 28

  ! PLUS            [ reduce using rule 21 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 21 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 21 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 21 (expression -> expression PLUS expression .) ]
  ! EQUALTO         [ reduce using rule 21 (expression -> expression PLUS expression .) ]


state 38

    (22) expression -> expression MINUS expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . EQUALTO expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALTO resolved as shift
    LPAREN          reduce using rule 22 (expression -> expression MINUS expression .)
    INTEGER         reduce using rule 22 (expression -> expression MINUS expression .)
    FLOAT           reduce using rule 22 (expression -> expression MINUS expression .)
    IDENTIFIER      reduce using rule 22 (expression -> expression MINUS expression .)
    PRINT           reduce using rule 22 (expression -> expression MINUS expression .)
    IF              reduce using rule 22 (expression -> expression MINUS expression .)
    FOR             reduce using rule 22 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 22 (expression -> expression MINUS expression .)
    TRUE            reduce using rule 22 (expression -> expression MINUS expression .)
    FALSE           reduce using rule 22 (expression -> expression MINUS expression .)
    $end            reduce using rule 22 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 22 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 22 (expression -> expression MINUS expression .)
    COLON           reduce using rule 22 (expression -> expression MINUS expression .)
    IN              reduce using rule 22 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 22 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    EQUALTO         shift and go to state 28

  ! PLUS            [ reduce using rule 22 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 22 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 22 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 22 (expression -> expression MINUS expression .) ]
  ! EQUALTO         [ reduce using rule 22 (expression -> expression MINUS expression .) ]


state 39

    (23) expression -> expression TIMES expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . EQUALTO expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALTO resolved as shift
    LPAREN          reduce using rule 23 (expression -> expression TIMES expression .)
    INTEGER         reduce using rule 23 (expression -> expression TIMES expression .)
    FLOAT           reduce using rule 23 (expression -> expression TIMES expression .)
    IDENTIFIER      reduce using rule 23 (expression -> expression TIMES expression .)
    PRINT           reduce using rule 23 (expression -> expression TIMES expression .)
    IF              reduce using rule 23 (expression -> expression TIMES expression .)
    FOR             reduce using rule 23 (expression -> expression TIMES expression .)
    WHILE           reduce using rule 23 (expression -> expression TIMES expression .)
    TRUE            reduce using rule 23 (expression -> expression TIMES expression .)
    FALSE           reduce using rule 23 (expression -> expression TIMES expression .)
    $end            reduce using rule 23 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 23 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 23 (expression -> expression TIMES expression .)
    COLON           reduce using rule 23 (expression -> expression TIMES expression .)
    IN              reduce using rule 23 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 23 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    EQUALTO         shift and go to state 28

  ! PLUS            [ reduce using rule 23 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 23 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 23 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 23 (expression -> expression TIMES expression .) ]
  ! EQUALTO         [ reduce using rule 23 (expression -> expression TIMES expression .) ]


state 40

    (24) expression -> expression DIVIDE expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . EQUALTO expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALTO resolved as shift
    LPAREN          reduce using rule 24 (expression -> expression DIVIDE expression .)
    INTEGER         reduce using rule 24 (expression -> expression DIVIDE expression .)
    FLOAT           reduce using rule 24 (expression -> expression DIVIDE expression .)
    IDENTIFIER      reduce using rule 24 (expression -> expression DIVIDE expression .)
    PRINT           reduce using rule 24 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 24 (expression -> expression DIVIDE expression .)
    FOR             reduce using rule 24 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 24 (expression -> expression DIVIDE expression .)
    TRUE            reduce using rule 24 (expression -> expression DIVIDE expression .)
    FALSE           reduce using rule 24 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 24 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 24 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 24 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 24 (expression -> expression DIVIDE expression .)
    IN              reduce using rule 24 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 24 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    EQUALTO         shift and go to state 28

  ! PLUS            [ reduce using rule 24 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 24 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 24 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 24 (expression -> expression DIVIDE expression .) ]
  ! EQUALTO         [ reduce using rule 24 (expression -> expression DIVIDE expression .) ]


state 41

    (25) expression -> expression EQUALTO expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . EQUALTO expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALTO resolved as shift
    LPAREN          reduce using rule 25 (expression -> expression EQUALTO expression .)
    INTEGER         reduce using rule 25 (expression -> expression EQUALTO expression .)
    FLOAT           reduce using rule 25 (expression -> expression EQUALTO expression .)
    IDENTIFIER      reduce using rule 25 (expression -> expression EQUALTO expression .)
    PRINT           reduce using rule 25 (expression -> expression EQUALTO expression .)
    IF              reduce using rule 25 (expression -> expression EQUALTO expression .)
    FOR             reduce using rule 25 (expression -> expression EQUALTO expression .)
    WHILE           reduce using rule 25 (expression -> expression EQUALTO expression .)
    TRUE            reduce using rule 25 (expression -> expression EQUALTO expression .)
    FALSE           reduce using rule 25 (expression -> expression EQUALTO expression .)
    $end            reduce using rule 25 (expression -> expression EQUALTO expression .)
    ELSE            reduce using rule 25 (expression -> expression EQUALTO expression .)
    RPAREN          reduce using rule 25 (expression -> expression EQUALTO expression .)
    COLON           reduce using rule 25 (expression -> expression EQUALTO expression .)
    IN              reduce using rule 25 (expression -> expression EQUALTO expression .)
    COMMA           reduce using rule 25 (expression -> expression EQUALTO expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    EQUALTO         shift and go to state 28

  ! PLUS            [ reduce using rule 25 (expression -> expression EQUALTO expression .) ]
  ! MINUS           [ reduce using rule 25 (expression -> expression EQUALTO expression .) ]
  ! TIMES           [ reduce using rule 25 (expression -> expression EQUALTO expression .) ]
  ! DIVIDE          [ reduce using rule 25 (expression -> expression EQUALTO expression .) ]
  ! EQUALTO         [ reduce using rule 25 (expression -> expression EQUALTO expression .) ]


state 42

    (26) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    EQUALTO         reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    INTEGER         reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 26 (expression -> LPAREN expression RPAREN .)


state 43

    (31) assignment_statement -> IDENTIFIER EQUAL expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . EQUALTO expression

    LPAREN          reduce using rule 31 (assignment_statement -> IDENTIFIER EQUAL expression .)
    INTEGER         reduce using rule 31 (assignment_statement -> IDENTIFIER EQUAL expression .)
    FLOAT           reduce using rule 31 (assignment_statement -> IDENTIFIER EQUAL expression .)
    IDENTIFIER      reduce using rule 31 (assignment_statement -> IDENTIFIER EQUAL expression .)
    PRINT           reduce using rule 31 (assignment_statement -> IDENTIFIER EQUAL expression .)
    IF              reduce using rule 31 (assignment_statement -> IDENTIFIER EQUAL expression .)
    FOR             reduce using rule 31 (assignment_statement -> IDENTIFIER EQUAL expression .)
    WHILE           reduce using rule 31 (assignment_statement -> IDENTIFIER EQUAL expression .)
    TRUE            reduce using rule 31 (assignment_statement -> IDENTIFIER EQUAL expression .)
    FALSE           reduce using rule 31 (assignment_statement -> IDENTIFIER EQUAL expression .)
    $end            reduce using rule 31 (assignment_statement -> IDENTIFIER EQUAL expression .)
    ELSE            reduce using rule 31 (assignment_statement -> IDENTIFIER EQUAL expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    EQUALTO         shift and go to state 28


state 44

    (32) function_call -> IDENTIFIER LPAREN argument_list . RPAREN
    (34) argument_list -> argument_list . COMMA expression

    RPAREN          shift and go to state 50
    COMMA           shift and go to state 51


state 45

    (33) argument_list -> expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . EQUALTO expression

    RPAREN          reduce using rule 33 (argument_list -> expression .)
    COMMA           reduce using rule 33 (argument_list -> expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    EQUALTO         shift and go to state 28


state 46

    (20) print_statement -> PRINT LPAREN expression . RPAREN
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . EQUALTO expression

    RPAREN          shift and go to state 52
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    EQUALTO         shift and go to state 28


state 47

    (13) inline_if_statement -> IF expression COLON . statements
    (14) inline_if_statement -> IF expression COLON . statements ELSE statements
    (1) statements -> . statement statements
    (2) statements -> . statement
    (3) statements -> . empty
    (4) statement -> . conditional
    (5) statement -> . expression
    (6) statement -> . assignment_statement
    (7) statement -> . function_call
    (8) statement -> . print_statement
    (9) statement -> . empty
    (35) empty -> .
    (10) conditional -> . inline_if_statement
    (11) conditional -> . for_statement
    (12) conditional -> . while_statement
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression EQUALTO expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . INTEGER
    (28) expression -> . FLOAT
    (29) expression -> . IDENTIFIER
    (30) expression -> . bool
    (31) assignment_statement -> . IDENTIFIER EQUAL expression
    (32) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (20) print_statement -> . PRINT LPAREN expression RPAREN
    (13) inline_if_statement -> . IF expression COLON statements
    (14) inline_if_statement -> . IF expression COLON statements ELSE statements
    (15) for_statement -> . FOR expression IN range_expression
    (17) while_statement -> . WHILE expression COLON statements
    (18) bool -> . TRUE
    (19) bool -> . FALSE

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 35 (empty -> .)
    ELSE            reduce using rule 35 (empty -> .)
    LPAREN          shift and go to state 12
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 14
    IDENTIFIER      shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22

  ! LPAREN          [ reduce using rule 35 (empty -> .) ]
  ! INTEGER         [ reduce using rule 35 (empty -> .) ]
  ! FLOAT           [ reduce using rule 35 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 35 (empty -> .) ]
  ! PRINT           [ reduce using rule 35 (empty -> .) ]
  ! IF              [ reduce using rule 35 (empty -> .) ]
  ! FOR             [ reduce using rule 35 (empty -> .) ]
  ! WHILE           [ reduce using rule 35 (empty -> .) ]
  ! TRUE            [ reduce using rule 35 (empty -> .) ]
  ! FALSE           [ reduce using rule 35 (empty -> .) ]

    expression                     shift and go to state 5
    statements                     shift and go to state 53
    statement                      shift and go to state 2
    empty                          shift and go to state 3
    conditional                    shift and go to state 4
    assignment_statement           shift and go to state 6
    function_call                  shift and go to state 7
    print_statement                shift and go to state 8
    inline_if_statement            shift and go to state 9
    for_statement                  shift and go to state 10
    while_statement                shift and go to state 11
    bool                           shift and go to state 16

state 48

    (15) for_statement -> FOR expression IN . range_expression
    (16) range_expression -> . RANGE expression COMMA expression

    RANGE           shift and go to state 55

    range_expression               shift and go to state 54

state 49

    (17) while_statement -> WHILE expression COLON . statements
    (1) statements -> . statement statements
    (2) statements -> . statement
    (3) statements -> . empty
    (4) statement -> . conditional
    (5) statement -> . expression
    (6) statement -> . assignment_statement
    (7) statement -> . function_call
    (8) statement -> . print_statement
    (9) statement -> . empty
    (35) empty -> .
    (10) conditional -> . inline_if_statement
    (11) conditional -> . for_statement
    (12) conditional -> . while_statement
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression EQUALTO expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . INTEGER
    (28) expression -> . FLOAT
    (29) expression -> . IDENTIFIER
    (30) expression -> . bool
    (31) assignment_statement -> . IDENTIFIER EQUAL expression
    (32) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (20) print_statement -> . PRINT LPAREN expression RPAREN
    (13) inline_if_statement -> . IF expression COLON statements
    (14) inline_if_statement -> . IF expression COLON statements ELSE statements
    (15) for_statement -> . FOR expression IN range_expression
    (17) while_statement -> . WHILE expression COLON statements
    (18) bool -> . TRUE
    (19) bool -> . FALSE

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 35 (empty -> .)
    ELSE            reduce using rule 35 (empty -> .)
    LPAREN          shift and go to state 12
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 14
    IDENTIFIER      shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22

  ! LPAREN          [ reduce using rule 35 (empty -> .) ]
  ! INTEGER         [ reduce using rule 35 (empty -> .) ]
  ! FLOAT           [ reduce using rule 35 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 35 (empty -> .) ]
  ! PRINT           [ reduce using rule 35 (empty -> .) ]
  ! IF              [ reduce using rule 35 (empty -> .) ]
  ! FOR             [ reduce using rule 35 (empty -> .) ]
  ! WHILE           [ reduce using rule 35 (empty -> .) ]
  ! TRUE            [ reduce using rule 35 (empty -> .) ]
  ! FALSE           [ reduce using rule 35 (empty -> .) ]

    expression                     shift and go to state 5
    statements                     shift and go to state 56
    statement                      shift and go to state 2
    empty                          shift and go to state 3
    conditional                    shift and go to state 4
    assignment_statement           shift and go to state 6
    function_call                  shift and go to state 7
    print_statement                shift and go to state 8
    inline_if_statement            shift and go to state 9
    for_statement                  shift and go to state 10
    while_statement                shift and go to state 11
    bool                           shift and go to state 16

state 50

    (32) function_call -> IDENTIFIER LPAREN argument_list RPAREN .

    LPAREN          reduce using rule 32 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    INTEGER         reduce using rule 32 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    FLOAT           reduce using rule 32 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    IDENTIFIER      reduce using rule 32 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    PRINT           reduce using rule 32 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    IF              reduce using rule 32 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    FOR             reduce using rule 32 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    WHILE           reduce using rule 32 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    TRUE            reduce using rule 32 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    FALSE           reduce using rule 32 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    $end            reduce using rule 32 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    ELSE            reduce using rule 32 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)


state 51

    (34) argument_list -> argument_list COMMA . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression EQUALTO expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . INTEGER
    (28) expression -> . FLOAT
    (29) expression -> . IDENTIFIER
    (30) expression -> . bool
    (18) bool -> . TRUE
    (19) bool -> . FALSE

    LPAREN          shift and go to state 12
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 14
    IDENTIFIER      shift and go to state 30
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22

    expression                     shift and go to state 57
    bool                           shift and go to state 16

state 52

    (20) print_statement -> PRINT LPAREN expression RPAREN .

    LPAREN          reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    INTEGER         reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    FLOAT           reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    PRINT           reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    IF              reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    FOR             reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    WHILE           reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    TRUE            reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    FALSE           reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    $end            reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    ELSE            reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)


state 53

    (13) inline_if_statement -> IF expression COLON statements .
    (14) inline_if_statement -> IF expression COLON statements . ELSE statements

  ! shift/reduce conflict for ELSE resolved as shift
    LPAREN          reduce using rule 13 (inline_if_statement -> IF expression COLON statements .)
    INTEGER         reduce using rule 13 (inline_if_statement -> IF expression COLON statements .)
    FLOAT           reduce using rule 13 (inline_if_statement -> IF expression COLON statements .)
    IDENTIFIER      reduce using rule 13 (inline_if_statement -> IF expression COLON statements .)
    PRINT           reduce using rule 13 (inline_if_statement -> IF expression COLON statements .)
    IF              reduce using rule 13 (inline_if_statement -> IF expression COLON statements .)
    FOR             reduce using rule 13 (inline_if_statement -> IF expression COLON statements .)
    WHILE           reduce using rule 13 (inline_if_statement -> IF expression COLON statements .)
    TRUE            reduce using rule 13 (inline_if_statement -> IF expression COLON statements .)
    FALSE           reduce using rule 13 (inline_if_statement -> IF expression COLON statements .)
    $end            reduce using rule 13 (inline_if_statement -> IF expression COLON statements .)
    ELSE            shift and go to state 58

  ! ELSE            [ reduce using rule 13 (inline_if_statement -> IF expression COLON statements .) ]


state 54

    (15) for_statement -> FOR expression IN range_expression .

    LPAREN          reduce using rule 15 (for_statement -> FOR expression IN range_expression .)
    INTEGER         reduce using rule 15 (for_statement -> FOR expression IN range_expression .)
    FLOAT           reduce using rule 15 (for_statement -> FOR expression IN range_expression .)
    IDENTIFIER      reduce using rule 15 (for_statement -> FOR expression IN range_expression .)
    PRINT           reduce using rule 15 (for_statement -> FOR expression IN range_expression .)
    IF              reduce using rule 15 (for_statement -> FOR expression IN range_expression .)
    FOR             reduce using rule 15 (for_statement -> FOR expression IN range_expression .)
    WHILE           reduce using rule 15 (for_statement -> FOR expression IN range_expression .)
    TRUE            reduce using rule 15 (for_statement -> FOR expression IN range_expression .)
    FALSE           reduce using rule 15 (for_statement -> FOR expression IN range_expression .)
    $end            reduce using rule 15 (for_statement -> FOR expression IN range_expression .)
    ELSE            reduce using rule 15 (for_statement -> FOR expression IN range_expression .)


state 55

    (16) range_expression -> RANGE . expression COMMA expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression EQUALTO expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . INTEGER
    (28) expression -> . FLOAT
    (29) expression -> . IDENTIFIER
    (30) expression -> . bool
    (18) bool -> . TRUE
    (19) bool -> . FALSE

    LPAREN          shift and go to state 12
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 14
    IDENTIFIER      shift and go to state 30
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22

    expression                     shift and go to state 59
    bool                           shift and go to state 16

state 56

    (17) while_statement -> WHILE expression COLON statements .

    LPAREN          reduce using rule 17 (while_statement -> WHILE expression COLON statements .)
    INTEGER         reduce using rule 17 (while_statement -> WHILE expression COLON statements .)
    FLOAT           reduce using rule 17 (while_statement -> WHILE expression COLON statements .)
    IDENTIFIER      reduce using rule 17 (while_statement -> WHILE expression COLON statements .)
    PRINT           reduce using rule 17 (while_statement -> WHILE expression COLON statements .)
    IF              reduce using rule 17 (while_statement -> WHILE expression COLON statements .)
    FOR             reduce using rule 17 (while_statement -> WHILE expression COLON statements .)
    WHILE           reduce using rule 17 (while_statement -> WHILE expression COLON statements .)
    TRUE            reduce using rule 17 (while_statement -> WHILE expression COLON statements .)
    FALSE           reduce using rule 17 (while_statement -> WHILE expression COLON statements .)
    $end            reduce using rule 17 (while_statement -> WHILE expression COLON statements .)
    ELSE            reduce using rule 17 (while_statement -> WHILE expression COLON statements .)


state 57

    (34) argument_list -> argument_list COMMA expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . EQUALTO expression

    RPAREN          reduce using rule 34 (argument_list -> argument_list COMMA expression .)
    COMMA           reduce using rule 34 (argument_list -> argument_list COMMA expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    EQUALTO         shift and go to state 28


state 58

    (14) inline_if_statement -> IF expression COLON statements ELSE . statements
    (1) statements -> . statement statements
    (2) statements -> . statement
    (3) statements -> . empty
    (4) statement -> . conditional
    (5) statement -> . expression
    (6) statement -> . assignment_statement
    (7) statement -> . function_call
    (8) statement -> . print_statement
    (9) statement -> . empty
    (35) empty -> .
    (10) conditional -> . inline_if_statement
    (11) conditional -> . for_statement
    (12) conditional -> . while_statement
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression EQUALTO expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . INTEGER
    (28) expression -> . FLOAT
    (29) expression -> . IDENTIFIER
    (30) expression -> . bool
    (31) assignment_statement -> . IDENTIFIER EQUAL expression
    (32) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (20) print_statement -> . PRINT LPAREN expression RPAREN
    (13) inline_if_statement -> . IF expression COLON statements
    (14) inline_if_statement -> . IF expression COLON statements ELSE statements
    (15) for_statement -> . FOR expression IN range_expression
    (17) while_statement -> . WHILE expression COLON statements
    (18) bool -> . TRUE
    (19) bool -> . FALSE

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 35 (empty -> .)
    ELSE            reduce using rule 35 (empty -> .)
    LPAREN          shift and go to state 12
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 14
    IDENTIFIER      shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22

  ! LPAREN          [ reduce using rule 35 (empty -> .) ]
  ! INTEGER         [ reduce using rule 35 (empty -> .) ]
  ! FLOAT           [ reduce using rule 35 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 35 (empty -> .) ]
  ! PRINT           [ reduce using rule 35 (empty -> .) ]
  ! IF              [ reduce using rule 35 (empty -> .) ]
  ! FOR             [ reduce using rule 35 (empty -> .) ]
  ! WHILE           [ reduce using rule 35 (empty -> .) ]
  ! TRUE            [ reduce using rule 35 (empty -> .) ]
  ! FALSE           [ reduce using rule 35 (empty -> .) ]

    expression                     shift and go to state 5
    statements                     shift and go to state 60
    statement                      shift and go to state 2
    empty                          shift and go to state 3
    conditional                    shift and go to state 4
    assignment_statement           shift and go to state 6
    function_call                  shift and go to state 7
    print_statement                shift and go to state 8
    inline_if_statement            shift and go to state 9
    for_statement                  shift and go to state 10
    while_statement                shift and go to state 11
    bool                           shift and go to state 16

state 59

    (16) range_expression -> RANGE expression . COMMA expression
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . EQUALTO expression

    COMMA           shift and go to state 61
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    EQUALTO         shift and go to state 28


state 60

    (14) inline_if_statement -> IF expression COLON statements ELSE statements .

    LPAREN          reduce using rule 14 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    INTEGER         reduce using rule 14 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    FLOAT           reduce using rule 14 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    IDENTIFIER      reduce using rule 14 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    PRINT           reduce using rule 14 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    IF              reduce using rule 14 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    FOR             reduce using rule 14 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    WHILE           reduce using rule 14 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    TRUE            reduce using rule 14 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    FALSE           reduce using rule 14 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    $end            reduce using rule 14 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    ELSE            reduce using rule 14 (inline_if_statement -> IF expression COLON statements ELSE statements .)


state 61

    (16) range_expression -> RANGE expression COMMA . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression EQUALTO expression
    (26) expression -> . LPAREN expression RPAREN
    (27) expression -> . INTEGER
    (28) expression -> . FLOAT
    (29) expression -> . IDENTIFIER
    (30) expression -> . bool
    (18) bool -> . TRUE
    (19) bool -> . FALSE

    LPAREN          shift and go to state 12
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 14
    IDENTIFIER      shift and go to state 30
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22

    expression                     shift and go to state 62
    bool                           shift and go to state 16

state 62

    (16) range_expression -> RANGE expression COMMA expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . EQUALTO expression

    LPAREN          reduce using rule 16 (range_expression -> RANGE expression COMMA expression .)
    INTEGER         reduce using rule 16 (range_expression -> RANGE expression COMMA expression .)
    FLOAT           reduce using rule 16 (range_expression -> RANGE expression COMMA expression .)
    IDENTIFIER      reduce using rule 16 (range_expression -> RANGE expression COMMA expression .)
    PRINT           reduce using rule 16 (range_expression -> RANGE expression COMMA expression .)
    IF              reduce using rule 16 (range_expression -> RANGE expression COMMA expression .)
    FOR             reduce using rule 16 (range_expression -> RANGE expression COMMA expression .)
    WHILE           reduce using rule 16 (range_expression -> RANGE expression COMMA expression .)
    TRUE            reduce using rule 16 (range_expression -> RANGE expression COMMA expression .)
    FALSE           reduce using rule 16 (range_expression -> RANGE expression COMMA expression .)
    $end            reduce using rule 16 (range_expression -> RANGE expression COMMA expression .)
    ELSE            reduce using rule 16 (range_expression -> RANGE expression COMMA expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    EQUALTO         shift and go to state 28

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 0 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 0 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 0 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 2 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 2 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 2 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 2 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 2 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 2 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 15 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 37 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 37 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 37 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 37 resolved as shift
WARNING: shift/reduce conflict for EQUALTO in state 37 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 38 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 38 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 38 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 38 resolved as shift
WARNING: shift/reduce conflict for EQUALTO in state 38 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 39 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 39 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 39 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 39 resolved as shift
WARNING: shift/reduce conflict for EQUALTO in state 39 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 40 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 40 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 40 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 40 resolved as shift
WARNING: shift/reduce conflict for EQUALTO in state 40 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 41 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 41 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 41 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 41 resolved as shift
WARNING: shift/reduce conflict for EQUALTO in state 41 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 47 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 47 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 47 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 47 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 47 resolved as shift
WARNING: shift/reduce conflict for IF in state 47 resolved as shift
WARNING: shift/reduce conflict for FOR in state 47 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 47 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 47 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 47 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 49 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 49 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 49 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 49 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 49 resolved as shift
WARNING: shift/reduce conflict for IF in state 49 resolved as shift
WARNING: shift/reduce conflict for FOR in state 49 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 49 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 49 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 49 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 53 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 58 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 58 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 58 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 58 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 58 resolved as shift
WARNING: shift/reduce conflict for IF in state 58 resolved as shift
WARNING: shift/reduce conflict for FOR in state 58 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 58 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 58 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 58 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (statements -> statement)
WARNING: rejected rule (empty -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 3 resolved using rule (statements -> empty)
WARNING: rejected rule (statement -> empty) in state 3
WARNING: Rule (statement -> empty) is never reduced

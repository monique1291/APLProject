Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EQUALS
    FLOAT
    GREATERTHAN
    LCURVEDBRACE
    LESSTHAN
    LSQUAREDBRACKET
    NAME
    RCURVEDBRACE
    RSQUAREDBRACKET

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression PLUS expression
Rule 2     expression -> expression MINUS expression
Rule 3     expression -> expression MULTIPLY expression
Rule 4     expression -> expression DIVIDE expression
Rule 5     expression -> LPAREN expression RPAREN
Rule 6     expression -> INT

Terminals, with rules where they appear

DIVIDE               : 4
EQUALS               : 
FLOAT                : 
GREATERTHAN          : 
INT                  : 6
LCURVEDBRACE         : 
LESSTHAN             : 
LPAREN               : 5
LSQUAREDBRACKET      : 
MINUS                : 2
MULTIPLY             : 3
NAME                 : 
PLUS                 : 1
RCURVEDBRACE         : 
RPAREN               : 5
RSQUAREDBRACKET      : 
error                : 

Nonterminals, with rules where they appear

expression           : 1 1 2 2 3 3 4 4 5 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . INT

    LPAREN          shift and go to state 2
    INT             shift and go to state 3

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

    PLUS            shift and go to state 4
    MINUS           shift and go to state 5
    MULTIPLY        shift and go to state 6
    DIVIDE          shift and go to state 7


state 2

    (5) expression -> LPAREN . expression RPAREN
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . INT

    LPAREN          shift and go to state 2
    INT             shift and go to state 3

    expression                     shift and go to state 8

state 3

    (6) expression -> INT .

    PLUS            reduce using rule 6 (expression -> INT .)
    MINUS           reduce using rule 6 (expression -> INT .)
    MULTIPLY        reduce using rule 6 (expression -> INT .)
    DIVIDE          reduce using rule 6 (expression -> INT .)
    $end            reduce using rule 6 (expression -> INT .)
    RPAREN          reduce using rule 6 (expression -> INT .)


state 4

    (1) expression -> expression PLUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . INT

    LPAREN          shift and go to state 2
    INT             shift and go to state 3

    expression                     shift and go to state 9

state 5

    (2) expression -> expression MINUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . INT

    LPAREN          shift and go to state 2
    INT             shift and go to state 3

    expression                     shift and go to state 10

state 6

    (3) expression -> expression MULTIPLY . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . INT

    LPAREN          shift and go to state 2
    INT             shift and go to state 3

    expression                     shift and go to state 11

state 7

    (4) expression -> expression DIVIDE . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . INT

    LPAREN          shift and go to state 2
    INT             shift and go to state 3

    expression                     shift and go to state 12

state 8

    (5) expression -> LPAREN expression . RPAREN
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 13
    PLUS            shift and go to state 4
    MINUS           shift and go to state 5
    MULTIPLY        shift and go to state 6
    DIVIDE          shift and go to state 7


state 9

    (1) expression -> expression PLUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 1 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 1 (expression -> expression PLUS expression .)
    $end            reduce using rule 1 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 1 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 6
    DIVIDE          shift and go to state 7

  ! MULTIPLY        [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 4 ]
  ! MINUS           [ shift and go to state 5 ]


state 10

    (2) expression -> expression MINUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 2 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 2 (expression -> expression MINUS expression .)
    $end            reduce using rule 2 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 2 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 6
    DIVIDE          shift and go to state 7

  ! MULTIPLY        [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 4 ]
  ! MINUS           [ shift and go to state 5 ]


state 11

    (3) expression -> expression MULTIPLY expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 3 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 3 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 3 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 3 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 3 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 3 (expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 4 ]
  ! MINUS           [ shift and go to state 5 ]
  ! MULTIPLY        [ shift and go to state 6 ]
  ! DIVIDE          [ shift and go to state 7 ]


state 12

    (4) expression -> expression DIVIDE expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 4 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 4 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 4 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 4 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 4 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 4 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 4 ]
  ! MINUS           [ shift and go to state 5 ]
  ! MULTIPLY        [ shift and go to state 6 ]
  ! DIVIDE          [ shift and go to state 7 ]


state 13

    (5) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 5 (expression -> LPAREN expression RPAREN .)


Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BREAK
    Bool
    CASE
    COMMENTS
    DEF
    DIVIDEEQUAL
    DO
    DOUBLEQUOTES
    Double
    ELIF
    EQUALEQUAL
    EQUALTO
    FINALLY
    Float
    GLOBAL
    GREATEREQUAL
    IMPORT
    INT
    IS
    LCURVEDBRACE
    LESSEQUAL
    LESSTHAN
    MAIN
    MINUSEQUAL
    NOT
    NOTEQUAL
    OR
    PLUSEQUAL
    RCURVEDBRACE
    RESERVEDWORD
    RETURN
    RULE_CLOSE
    RULE_OPEN
    SINGLEQUOTES
    SWITCH
    Str
    THEN
    TIMESEQUAL
    UNTIL

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statement statements
Rule 2     statements -> statement
Rule 3     statements -> empty
Rule 4     statement -> conditional
Rule 5     statement -> expression
Rule 6     statement -> assignment_statement
Rule 7     statement -> function_call
Rule 8     statement -> print_statement
Rule 9     statement -> empty
Rule 10    conditional -> inline_if_statement
Rule 11    conditional -> for_statement
Rule 12    conditional -> while_statement
Rule 13    variable_declaration -> VARIABLE datatype IDENTIFIER
Rule 14    array_declaration -> ARRAY datatype IDENTIFIER LSQUAREDBRACKET INTEGER RSQUAREDBRACKET
Rule 15    function_declaration -> FUNC datatype IDENTIFIER LPAREN argument_list RPAREN statements CLOSEFUNC
Rule 16    class_declaration -> CLASS IDENTIFIER COLON statements CLOSECLASS
Rule 17    inline_if_statement -> IF expression COLON statements ENDIF
Rule 18    inline_if_statement -> IF expression COLON statements ELSE statements
Rule 19    for_statement -> FOR expression IN range_expression
Rule 20    range_expression -> RANGE expression COMMA expression
Rule 21    while_statement -> WHILE expression COLON statements
Rule 22    bool -> TRUE
Rule 23    bool -> FALSE
Rule 24    print_statement -> PRINT LPAREN expression RPAREN
Rule 25    expression -> expression GREATERTHAN datatype
Rule 26    expression -> expression PLUS datatype
Rule 27    expression -> expression MINUS datatype
Rule 28    expression -> expression TIMES datatype
Rule 29    expression -> expression DIVIDE datatype
Rule 30    expression -> expression EQUAL datatype
Rule 31    expression -> LPAREN expression RPAREN
Rule 32    expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET
Rule 33    expression -> token
Rule 34    expression -> datatype
Rule 35    datatype -> INTEGER
Rule 36    datatype -> FLOAT
Rule 37    datatype -> STRING
Rule 38    datatype -> IDENTIFIER
Rule 39    datatype -> bool
Rule 40    token -> COLON
Rule 41    token -> EQUAL
Rule 42    assignment_statement -> IDENTIFIER EQUAL expression
Rule 43    function_call -> IDENTIFIER LPAREN argument_list RPAREN
Rule 44    argument_list -> datatype IDENTIFIER COMMA argument_list
Rule 45    argument_list -> datatype IDENTIFIER
Rule 46    argument_list -> empty
Rule 47    empty -> <empty>

Terminals, with rules where they appear

AND                  : 
ARRAY                : 14
BREAK                : 
Bool                 : 
CASE                 : 
CLASS                : 16
CLOSECLASS           : 16
CLOSEFUNC            : 15
COLON                : 16 17 18 21 40
COMMA                : 20 44
COMMENTS             : 
DEF                  : 
DIVIDE               : 29
DIVIDEEQUAL          : 
DO                   : 
DOUBLEQUOTES         : 
Double               : 
ELIF                 : 
ELSE                 : 18
ENDIF                : 17
EQUAL                : 30 41 42
EQUALEQUAL           : 
EQUALTO              : 
FALSE                : 23
FINALLY              : 
FLOAT                : 36
FOR                  : 19
FUNC                 : 15
Float                : 
GLOBAL               : 
GREATEREQUAL         : 
GREATERTHAN          : 25
IDENTIFIER           : 13 14 15 16 38 42 43 44 45
IF                   : 17 18
IMPORT               : 
IN                   : 19
INT                  : 
INTEGER              : 14 35
IS                   : 
LCURVEDBRACE         : 
LESSEQUAL            : 
LESSTHAN             : 
LPAREN               : 15 24 31 43
LSQUAREDBRACKET      : 14 32
MAIN                 : 
MINUS                : 27
MINUSEQUAL           : 
NOT                  : 
NOTEQUAL             : 
OR                   : 
PLUS                 : 26
PLUSEQUAL            : 
PRINT                : 24
RANGE                : 20
RCURVEDBRACE         : 
RESERVEDWORD         : 
RETURN               : 
RPAREN               : 15 24 31 43
RSQUAREDBRACKET      : 14 32
RULE_CLOSE           : 
RULE_OPEN            : 
SINGLEQUOTES         : 
STRING               : 37
SWITCH               : 
Str                  : 
THEN                 : 
TIMES                : 28
TIMESEQUAL           : 
TRUE                 : 22
UNTIL                : 
VARIABLE             : 13
WHILE                : 21
error                : 

Nonterminals, with rules where they appear

argument_list        : 15 43 44
array_declaration    : 
assignment_statement : 6
bool                 : 39
class_declaration    : 
conditional          : 4
datatype             : 13 14 15 25 26 27 28 29 30 34 44 45
empty                : 3 9 46
expression           : 5 17 18 19 20 20 21 24 25 26 27 28 29 30 31 32 42
for_statement        : 11
function_call        : 7
function_declaration : 
inline_if_statement  : 10
print_statement      : 8
range_expression     : 19
statement            : 1 2
statements           : 1 15 16 17 18 18 21 0
token                : 33
variable_declaration : 
while_statement      : 12

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statement statements
    (2) statements -> . statement
    (3) statements -> . empty
    (4) statement -> . conditional
    (5) statement -> . expression
    (6) statement -> . assignment_statement
    (7) statement -> . function_call
    (8) statement -> . print_statement
    (9) statement -> . empty
    (47) empty -> .
    (10) conditional -> . inline_if_statement
    (11) conditional -> . for_statement
    (12) conditional -> . while_statement
    (25) expression -> . expression GREATERTHAN datatype
    (26) expression -> . expression PLUS datatype
    (27) expression -> . expression MINUS datatype
    (28) expression -> . expression TIMES datatype
    (29) expression -> . expression DIVIDE datatype
    (30) expression -> . expression EQUAL datatype
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . LSQUAREDBRACKET expression RSQUAREDBRACKET
    (33) expression -> . token
    (34) expression -> . datatype
    (42) assignment_statement -> . IDENTIFIER EQUAL expression
    (43) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (24) print_statement -> . PRINT LPAREN expression RPAREN
    (17) inline_if_statement -> . IF expression COLON statements ENDIF
    (18) inline_if_statement -> . IF expression COLON statements ELSE statements
    (19) for_statement -> . FOR expression IN range_expression
    (21) while_statement -> . WHILE expression COLON statements
    (40) token -> . COLON
    (41) token -> . EQUAL
    (35) datatype -> . INTEGER
    (36) datatype -> . FLOAT
    (37) datatype -> . STRING
    (38) datatype -> . IDENTIFIER
    (39) datatype -> . bool
    (22) bool -> . TRUE
    (23) bool -> . FALSE

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQUAREDBRACKET resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 47 (empty -> .)
    LPAREN          shift and go to state 14
    LSQUAREDBRACKET shift and go to state 15
    IDENTIFIER      shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    COLON           shift and go to state 20
    EQUAL           shift and go to state 13
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

  ! LPAREN          [ reduce using rule 47 (empty -> .) ]
  ! LSQUAREDBRACKET [ reduce using rule 47 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 47 (empty -> .) ]
  ! PRINT           [ reduce using rule 47 (empty -> .) ]
  ! IF              [ reduce using rule 47 (empty -> .) ]
  ! FOR             [ reduce using rule 47 (empty -> .) ]
  ! WHILE           [ reduce using rule 47 (empty -> .) ]
  ! COLON           [ reduce using rule 47 (empty -> .) ]
  ! EQUAL           [ reduce using rule 47 (empty -> .) ]
  ! INTEGER         [ reduce using rule 47 (empty -> .) ]
  ! FLOAT           [ reduce using rule 47 (empty -> .) ]
  ! STRING          [ reduce using rule 47 (empty -> .) ]
  ! TRUE            [ reduce using rule 47 (empty -> .) ]
  ! FALSE           [ reduce using rule 47 (empty -> .) ]

    statements                     shift and go to state 1
    statement                      shift and go to state 2
    empty                          shift and go to state 3
    conditional                    shift and go to state 4
    expression                     shift and go to state 5
    assignment_statement           shift and go to state 6
    function_call                  shift and go to state 7
    print_statement                shift and go to state 8
    inline_if_statement            shift and go to state 9
    for_statement                  shift and go to state 10
    while_statement                shift and go to state 11
    datatype                       shift and go to state 12
    token                          shift and go to state 16
    bool                           shift and go to state 26

state 1

    (0) S' -> statements .



state 2

    (1) statements -> statement . statements
    (2) statements -> statement .
    (1) statements -> . statement statements
    (2) statements -> . statement
    (3) statements -> . empty
    (4) statement -> . conditional
    (5) statement -> . expression
    (6) statement -> . assignment_statement
    (7) statement -> . function_call
    (8) statement -> . print_statement
    (9) statement -> . empty
    (47) empty -> .
    (10) conditional -> . inline_if_statement
    (11) conditional -> . for_statement
    (12) conditional -> . while_statement
    (25) expression -> . expression GREATERTHAN datatype
    (26) expression -> . expression PLUS datatype
    (27) expression -> . expression MINUS datatype
    (28) expression -> . expression TIMES datatype
    (29) expression -> . expression DIVIDE datatype
    (30) expression -> . expression EQUAL datatype
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . LSQUAREDBRACKET expression RSQUAREDBRACKET
    (33) expression -> . token
    (34) expression -> . datatype
    (42) assignment_statement -> . IDENTIFIER EQUAL expression
    (43) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (24) print_statement -> . PRINT LPAREN expression RPAREN
    (17) inline_if_statement -> . IF expression COLON statements ENDIF
    (18) inline_if_statement -> . IF expression COLON statements ELSE statements
    (19) for_statement -> . FOR expression IN range_expression
    (21) while_statement -> . WHILE expression COLON statements
    (40) token -> . COLON
    (41) token -> . EQUAL
    (35) datatype -> . INTEGER
    (36) datatype -> . FLOAT
    (37) datatype -> . STRING
    (38) datatype -> . IDENTIFIER
    (39) datatype -> . bool
    (22) bool -> . TRUE
    (23) bool -> . FALSE

  ! reduce/reduce conflict for $end resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for ENDIF resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for LSQUAREDBRACKET resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for PRINT resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for IF resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for FOR resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for COLON resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for EQUAL resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for FLOAT resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for STRING resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 2 (statements -> statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 2 (statements -> statement .)
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQUAREDBRACKET resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 2 (statements -> statement .)
    ENDIF           reduce using rule 2 (statements -> statement .)
    ELSE            reduce using rule 2 (statements -> statement .)
    LPAREN          shift and go to state 14
    LSQUAREDBRACKET shift and go to state 15
    IDENTIFIER      shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    COLON           shift and go to state 20
    EQUAL           shift and go to state 13
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

  ! LPAREN          [ reduce using rule 2 (statements -> statement .) ]
  ! LSQUAREDBRACKET [ reduce using rule 2 (statements -> statement .) ]
  ! IDENTIFIER      [ reduce using rule 2 (statements -> statement .) ]
  ! PRINT           [ reduce using rule 2 (statements -> statement .) ]
  ! IF              [ reduce using rule 2 (statements -> statement .) ]
  ! FOR             [ reduce using rule 2 (statements -> statement .) ]
  ! WHILE           [ reduce using rule 2 (statements -> statement .) ]
  ! COLON           [ reduce using rule 2 (statements -> statement .) ]
  ! EQUAL           [ reduce using rule 2 (statements -> statement .) ]
  ! INTEGER         [ reduce using rule 2 (statements -> statement .) ]
  ! FLOAT           [ reduce using rule 2 (statements -> statement .) ]
  ! STRING          [ reduce using rule 2 (statements -> statement .) ]
  ! TRUE            [ reduce using rule 2 (statements -> statement .) ]
  ! FALSE           [ reduce using rule 2 (statements -> statement .) ]
  ! $end            [ reduce using rule 47 (empty -> .) ]
  ! ENDIF           [ reduce using rule 47 (empty -> .) ]
  ! ELSE            [ reduce using rule 47 (empty -> .) ]
  ! LPAREN          [ reduce using rule 47 (empty -> .) ]
  ! LSQUAREDBRACKET [ reduce using rule 47 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 47 (empty -> .) ]
  ! PRINT           [ reduce using rule 47 (empty -> .) ]
  ! IF              [ reduce using rule 47 (empty -> .) ]
  ! FOR             [ reduce using rule 47 (empty -> .) ]
  ! WHILE           [ reduce using rule 47 (empty -> .) ]
  ! COLON           [ reduce using rule 47 (empty -> .) ]
  ! EQUAL           [ reduce using rule 47 (empty -> .) ]
  ! INTEGER         [ reduce using rule 47 (empty -> .) ]
  ! FLOAT           [ reduce using rule 47 (empty -> .) ]
  ! STRING          [ reduce using rule 47 (empty -> .) ]
  ! TRUE            [ reduce using rule 47 (empty -> .) ]
  ! FALSE           [ reduce using rule 47 (empty -> .) ]

    statement                      shift and go to state 2
    statements                     shift and go to state 29
    empty                          shift and go to state 3
    conditional                    shift and go to state 4
    expression                     shift and go to state 5
    assignment_statement           shift and go to state 6
    function_call                  shift and go to state 7
    print_statement                shift and go to state 8
    inline_if_statement            shift and go to state 9
    for_statement                  shift and go to state 10
    while_statement                shift and go to state 11
    datatype                       shift and go to state 12
    token                          shift and go to state 16
    bool                           shift and go to state 26

state 3

    (3) statements -> empty .
    (9) statement -> empty .

  ! reduce/reduce conflict for LPAREN resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for LSQUAREDBRACKET resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for PRINT resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for COLON resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for EQUAL resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for INTEGER resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for STRING resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for TRUE resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for FALSE resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for ENDIF resolved using rule 3 (statements -> empty .)
  ! reduce/reduce conflict for ELSE resolved using rule 3 (statements -> empty .)
    $end            reduce using rule 3 (statements -> empty .)
    ENDIF           reduce using rule 3 (statements -> empty .)
    ELSE            reduce using rule 3 (statements -> empty .)
    LPAREN          reduce using rule 3 (statements -> empty .)
    LSQUAREDBRACKET reduce using rule 3 (statements -> empty .)
    IDENTIFIER      reduce using rule 3 (statements -> empty .)
    PRINT           reduce using rule 3 (statements -> empty .)
    IF              reduce using rule 3 (statements -> empty .)
    FOR             reduce using rule 3 (statements -> empty .)
    WHILE           reduce using rule 3 (statements -> empty .)
    COLON           reduce using rule 3 (statements -> empty .)
    EQUAL           reduce using rule 3 (statements -> empty .)
    INTEGER         reduce using rule 3 (statements -> empty .)
    FLOAT           reduce using rule 3 (statements -> empty .)
    STRING          reduce using rule 3 (statements -> empty .)
    TRUE            reduce using rule 3 (statements -> empty .)
    FALSE           reduce using rule 3 (statements -> empty .)

  ! LPAREN          [ reduce using rule 9 (statement -> empty .) ]
  ! LSQUAREDBRACKET [ reduce using rule 9 (statement -> empty .) ]
  ! IDENTIFIER      [ reduce using rule 9 (statement -> empty .) ]
  ! PRINT           [ reduce using rule 9 (statement -> empty .) ]
  ! IF              [ reduce using rule 9 (statement -> empty .) ]
  ! FOR             [ reduce using rule 9 (statement -> empty .) ]
  ! WHILE           [ reduce using rule 9 (statement -> empty .) ]
  ! COLON           [ reduce using rule 9 (statement -> empty .) ]
  ! EQUAL           [ reduce using rule 9 (statement -> empty .) ]
  ! INTEGER         [ reduce using rule 9 (statement -> empty .) ]
  ! FLOAT           [ reduce using rule 9 (statement -> empty .) ]
  ! STRING          [ reduce using rule 9 (statement -> empty .) ]
  ! TRUE            [ reduce using rule 9 (statement -> empty .) ]
  ! FALSE           [ reduce using rule 9 (statement -> empty .) ]
  ! $end            [ reduce using rule 9 (statement -> empty .) ]
  ! ENDIF           [ reduce using rule 9 (statement -> empty .) ]
  ! ELSE            [ reduce using rule 9 (statement -> empty .) ]


state 4

    (4) statement -> conditional .

    LPAREN          reduce using rule 4 (statement -> conditional .)
    LSQUAREDBRACKET reduce using rule 4 (statement -> conditional .)
    IDENTIFIER      reduce using rule 4 (statement -> conditional .)
    PRINT           reduce using rule 4 (statement -> conditional .)
    IF              reduce using rule 4 (statement -> conditional .)
    FOR             reduce using rule 4 (statement -> conditional .)
    WHILE           reduce using rule 4 (statement -> conditional .)
    COLON           reduce using rule 4 (statement -> conditional .)
    EQUAL           reduce using rule 4 (statement -> conditional .)
    INTEGER         reduce using rule 4 (statement -> conditional .)
    FLOAT           reduce using rule 4 (statement -> conditional .)
    STRING          reduce using rule 4 (statement -> conditional .)
    TRUE            reduce using rule 4 (statement -> conditional .)
    FALSE           reduce using rule 4 (statement -> conditional .)
    $end            reduce using rule 4 (statement -> conditional .)
    ENDIF           reduce using rule 4 (statement -> conditional .)
    ELSE            reduce using rule 4 (statement -> conditional .)


state 5

    (5) statement -> expression .
    (25) expression -> expression . GREATERTHAN datatype
    (26) expression -> expression . PLUS datatype
    (27) expression -> expression . MINUS datatype
    (28) expression -> expression . TIMES datatype
    (29) expression -> expression . DIVIDE datatype
    (30) expression -> expression . EQUAL datatype

  ! shift/reduce conflict for EQUAL resolved as shift
    LPAREN          reduce using rule 5 (statement -> expression .)
    LSQUAREDBRACKET reduce using rule 5 (statement -> expression .)
    IDENTIFIER      reduce using rule 5 (statement -> expression .)
    PRINT           reduce using rule 5 (statement -> expression .)
    IF              reduce using rule 5 (statement -> expression .)
    FOR             reduce using rule 5 (statement -> expression .)
    WHILE           reduce using rule 5 (statement -> expression .)
    COLON           reduce using rule 5 (statement -> expression .)
    INTEGER         reduce using rule 5 (statement -> expression .)
    FLOAT           reduce using rule 5 (statement -> expression .)
    STRING          reduce using rule 5 (statement -> expression .)
    TRUE            reduce using rule 5 (statement -> expression .)
    FALSE           reduce using rule 5 (statement -> expression .)
    $end            reduce using rule 5 (statement -> expression .)
    ENDIF           reduce using rule 5 (statement -> expression .)
    ELSE            reduce using rule 5 (statement -> expression .)
    GREATERTHAN     shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    EQUAL           shift and go to state 35

  ! EQUAL           [ reduce using rule 5 (statement -> expression .) ]


state 6

    (6) statement -> assignment_statement .

    LPAREN          reduce using rule 6 (statement -> assignment_statement .)
    LSQUAREDBRACKET reduce using rule 6 (statement -> assignment_statement .)
    IDENTIFIER      reduce using rule 6 (statement -> assignment_statement .)
    PRINT           reduce using rule 6 (statement -> assignment_statement .)
    IF              reduce using rule 6 (statement -> assignment_statement .)
    FOR             reduce using rule 6 (statement -> assignment_statement .)
    WHILE           reduce using rule 6 (statement -> assignment_statement .)
    COLON           reduce using rule 6 (statement -> assignment_statement .)
    EQUAL           reduce using rule 6 (statement -> assignment_statement .)
    INTEGER         reduce using rule 6 (statement -> assignment_statement .)
    FLOAT           reduce using rule 6 (statement -> assignment_statement .)
    STRING          reduce using rule 6 (statement -> assignment_statement .)
    TRUE            reduce using rule 6 (statement -> assignment_statement .)
    FALSE           reduce using rule 6 (statement -> assignment_statement .)
    $end            reduce using rule 6 (statement -> assignment_statement .)
    ENDIF           reduce using rule 6 (statement -> assignment_statement .)
    ELSE            reduce using rule 6 (statement -> assignment_statement .)


state 7

    (7) statement -> function_call .

    LPAREN          reduce using rule 7 (statement -> function_call .)
    LSQUAREDBRACKET reduce using rule 7 (statement -> function_call .)
    IDENTIFIER      reduce using rule 7 (statement -> function_call .)
    PRINT           reduce using rule 7 (statement -> function_call .)
    IF              reduce using rule 7 (statement -> function_call .)
    FOR             reduce using rule 7 (statement -> function_call .)
    WHILE           reduce using rule 7 (statement -> function_call .)
    COLON           reduce using rule 7 (statement -> function_call .)
    EQUAL           reduce using rule 7 (statement -> function_call .)
    INTEGER         reduce using rule 7 (statement -> function_call .)
    FLOAT           reduce using rule 7 (statement -> function_call .)
    STRING          reduce using rule 7 (statement -> function_call .)
    TRUE            reduce using rule 7 (statement -> function_call .)
    FALSE           reduce using rule 7 (statement -> function_call .)
    $end            reduce using rule 7 (statement -> function_call .)
    ENDIF           reduce using rule 7 (statement -> function_call .)
    ELSE            reduce using rule 7 (statement -> function_call .)


state 8

    (8) statement -> print_statement .

    LPAREN          reduce using rule 8 (statement -> print_statement .)
    LSQUAREDBRACKET reduce using rule 8 (statement -> print_statement .)
    IDENTIFIER      reduce using rule 8 (statement -> print_statement .)
    PRINT           reduce using rule 8 (statement -> print_statement .)
    IF              reduce using rule 8 (statement -> print_statement .)
    FOR             reduce using rule 8 (statement -> print_statement .)
    WHILE           reduce using rule 8 (statement -> print_statement .)
    COLON           reduce using rule 8 (statement -> print_statement .)
    EQUAL           reduce using rule 8 (statement -> print_statement .)
    INTEGER         reduce using rule 8 (statement -> print_statement .)
    FLOAT           reduce using rule 8 (statement -> print_statement .)
    STRING          reduce using rule 8 (statement -> print_statement .)
    TRUE            reduce using rule 8 (statement -> print_statement .)
    FALSE           reduce using rule 8 (statement -> print_statement .)
    $end            reduce using rule 8 (statement -> print_statement .)
    ENDIF           reduce using rule 8 (statement -> print_statement .)
    ELSE            reduce using rule 8 (statement -> print_statement .)


state 9

    (10) conditional -> inline_if_statement .

    LPAREN          reduce using rule 10 (conditional -> inline_if_statement .)
    LSQUAREDBRACKET reduce using rule 10 (conditional -> inline_if_statement .)
    IDENTIFIER      reduce using rule 10 (conditional -> inline_if_statement .)
    PRINT           reduce using rule 10 (conditional -> inline_if_statement .)
    IF              reduce using rule 10 (conditional -> inline_if_statement .)
    FOR             reduce using rule 10 (conditional -> inline_if_statement .)
    WHILE           reduce using rule 10 (conditional -> inline_if_statement .)
    COLON           reduce using rule 10 (conditional -> inline_if_statement .)
    EQUAL           reduce using rule 10 (conditional -> inline_if_statement .)
    INTEGER         reduce using rule 10 (conditional -> inline_if_statement .)
    FLOAT           reduce using rule 10 (conditional -> inline_if_statement .)
    STRING          reduce using rule 10 (conditional -> inline_if_statement .)
    TRUE            reduce using rule 10 (conditional -> inline_if_statement .)
    FALSE           reduce using rule 10 (conditional -> inline_if_statement .)
    $end            reduce using rule 10 (conditional -> inline_if_statement .)
    ENDIF           reduce using rule 10 (conditional -> inline_if_statement .)
    ELSE            reduce using rule 10 (conditional -> inline_if_statement .)


state 10

    (11) conditional -> for_statement .

    LPAREN          reduce using rule 11 (conditional -> for_statement .)
    LSQUAREDBRACKET reduce using rule 11 (conditional -> for_statement .)
    IDENTIFIER      reduce using rule 11 (conditional -> for_statement .)
    PRINT           reduce using rule 11 (conditional -> for_statement .)
    IF              reduce using rule 11 (conditional -> for_statement .)
    FOR             reduce using rule 11 (conditional -> for_statement .)
    WHILE           reduce using rule 11 (conditional -> for_statement .)
    COLON           reduce using rule 11 (conditional -> for_statement .)
    EQUAL           reduce using rule 11 (conditional -> for_statement .)
    INTEGER         reduce using rule 11 (conditional -> for_statement .)
    FLOAT           reduce using rule 11 (conditional -> for_statement .)
    STRING          reduce using rule 11 (conditional -> for_statement .)
    TRUE            reduce using rule 11 (conditional -> for_statement .)
    FALSE           reduce using rule 11 (conditional -> for_statement .)
    $end            reduce using rule 11 (conditional -> for_statement .)
    ENDIF           reduce using rule 11 (conditional -> for_statement .)
    ELSE            reduce using rule 11 (conditional -> for_statement .)


state 11

    (12) conditional -> while_statement .

    LPAREN          reduce using rule 12 (conditional -> while_statement .)
    LSQUAREDBRACKET reduce using rule 12 (conditional -> while_statement .)
    IDENTIFIER      reduce using rule 12 (conditional -> while_statement .)
    PRINT           reduce using rule 12 (conditional -> while_statement .)
    IF              reduce using rule 12 (conditional -> while_statement .)
    FOR             reduce using rule 12 (conditional -> while_statement .)
    WHILE           reduce using rule 12 (conditional -> while_statement .)
    COLON           reduce using rule 12 (conditional -> while_statement .)
    EQUAL           reduce using rule 12 (conditional -> while_statement .)
    INTEGER         reduce using rule 12 (conditional -> while_statement .)
    FLOAT           reduce using rule 12 (conditional -> while_statement .)
    STRING          reduce using rule 12 (conditional -> while_statement .)
    TRUE            reduce using rule 12 (conditional -> while_statement .)
    FALSE           reduce using rule 12 (conditional -> while_statement .)
    $end            reduce using rule 12 (conditional -> while_statement .)
    ENDIF           reduce using rule 12 (conditional -> while_statement .)
    ELSE            reduce using rule 12 (conditional -> while_statement .)


state 12

    (34) expression -> datatype .

    GREATERTHAN     reduce using rule 34 (expression -> datatype .)
    PLUS            reduce using rule 34 (expression -> datatype .)
    MINUS           reduce using rule 34 (expression -> datatype .)
    TIMES           reduce using rule 34 (expression -> datatype .)
    DIVIDE          reduce using rule 34 (expression -> datatype .)
    EQUAL           reduce using rule 34 (expression -> datatype .)
    LPAREN          reduce using rule 34 (expression -> datatype .)
    LSQUAREDBRACKET reduce using rule 34 (expression -> datatype .)
    IDENTIFIER      reduce using rule 34 (expression -> datatype .)
    PRINT           reduce using rule 34 (expression -> datatype .)
    IF              reduce using rule 34 (expression -> datatype .)
    FOR             reduce using rule 34 (expression -> datatype .)
    WHILE           reduce using rule 34 (expression -> datatype .)
    COLON           reduce using rule 34 (expression -> datatype .)
    INTEGER         reduce using rule 34 (expression -> datatype .)
    FLOAT           reduce using rule 34 (expression -> datatype .)
    STRING          reduce using rule 34 (expression -> datatype .)
    TRUE            reduce using rule 34 (expression -> datatype .)
    FALSE           reduce using rule 34 (expression -> datatype .)
    $end            reduce using rule 34 (expression -> datatype .)
    ENDIF           reduce using rule 34 (expression -> datatype .)
    ELSE            reduce using rule 34 (expression -> datatype .)
    RPAREN          reduce using rule 34 (expression -> datatype .)
    RSQUAREDBRACKET reduce using rule 34 (expression -> datatype .)
    IN              reduce using rule 34 (expression -> datatype .)
    COMMA           reduce using rule 34 (expression -> datatype .)


state 13

    (41) token -> EQUAL .

    GREATERTHAN     reduce using rule 41 (token -> EQUAL .)
    PLUS            reduce using rule 41 (token -> EQUAL .)
    MINUS           reduce using rule 41 (token -> EQUAL .)
    TIMES           reduce using rule 41 (token -> EQUAL .)
    DIVIDE          reduce using rule 41 (token -> EQUAL .)
    EQUAL           reduce using rule 41 (token -> EQUAL .)
    LPAREN          reduce using rule 41 (token -> EQUAL .)
    LSQUAREDBRACKET reduce using rule 41 (token -> EQUAL .)
    IDENTIFIER      reduce using rule 41 (token -> EQUAL .)
    PRINT           reduce using rule 41 (token -> EQUAL .)
    IF              reduce using rule 41 (token -> EQUAL .)
    FOR             reduce using rule 41 (token -> EQUAL .)
    WHILE           reduce using rule 41 (token -> EQUAL .)
    COLON           reduce using rule 41 (token -> EQUAL .)
    INTEGER         reduce using rule 41 (token -> EQUAL .)
    FLOAT           reduce using rule 41 (token -> EQUAL .)
    STRING          reduce using rule 41 (token -> EQUAL .)
    TRUE            reduce using rule 41 (token -> EQUAL .)
    FALSE           reduce using rule 41 (token -> EQUAL .)
    $end            reduce using rule 41 (token -> EQUAL .)
    ENDIF           reduce using rule 41 (token -> EQUAL .)
    ELSE            reduce using rule 41 (token -> EQUAL .)
    RPAREN          reduce using rule 41 (token -> EQUAL .)
    RSQUAREDBRACKET reduce using rule 41 (token -> EQUAL .)
    IN              reduce using rule 41 (token -> EQUAL .)
    COMMA           reduce using rule 41 (token -> EQUAL .)


state 14

    (31) expression -> LPAREN . expression RPAREN
    (25) expression -> . expression GREATERTHAN datatype
    (26) expression -> . expression PLUS datatype
    (27) expression -> . expression MINUS datatype
    (28) expression -> . expression TIMES datatype
    (29) expression -> . expression DIVIDE datatype
    (30) expression -> . expression EQUAL datatype
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . LSQUAREDBRACKET expression RSQUAREDBRACKET
    (33) expression -> . token
    (34) expression -> . datatype
    (40) token -> . COLON
    (41) token -> . EQUAL
    (35) datatype -> . INTEGER
    (36) datatype -> . FLOAT
    (37) datatype -> . STRING
    (38) datatype -> . IDENTIFIER
    (39) datatype -> . bool
    (22) bool -> . TRUE
    (23) bool -> . FALSE

    LPAREN          shift and go to state 14
    LSQUAREDBRACKET shift and go to state 15
    COLON           shift and go to state 20
    EQUAL           shift and go to state 13
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25
    IDENTIFIER      shift and go to state 37
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 36
    datatype                       shift and go to state 12
    token                          shift and go to state 16
    bool                           shift and go to state 26

state 15

    (32) expression -> LSQUAREDBRACKET . expression RSQUAREDBRACKET
    (25) expression -> . expression GREATERTHAN datatype
    (26) expression -> . expression PLUS datatype
    (27) expression -> . expression MINUS datatype
    (28) expression -> . expression TIMES datatype
    (29) expression -> . expression DIVIDE datatype
    (30) expression -> . expression EQUAL datatype
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . LSQUAREDBRACKET expression RSQUAREDBRACKET
    (33) expression -> . token
    (34) expression -> . datatype
    (40) token -> . COLON
    (41) token -> . EQUAL
    (35) datatype -> . INTEGER
    (36) datatype -> . FLOAT
    (37) datatype -> . STRING
    (38) datatype -> . IDENTIFIER
    (39) datatype -> . bool
    (22) bool -> . TRUE
    (23) bool -> . FALSE

    LPAREN          shift and go to state 14
    LSQUAREDBRACKET shift and go to state 15
    COLON           shift and go to state 20
    EQUAL           shift and go to state 13
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25
    IDENTIFIER      shift and go to state 37
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 38
    datatype                       shift and go to state 12
    token                          shift and go to state 16
    bool                           shift and go to state 26

state 16

    (33) expression -> token .

    GREATERTHAN     reduce using rule 33 (expression -> token .)
    PLUS            reduce using rule 33 (expression -> token .)
    MINUS           reduce using rule 33 (expression -> token .)
    TIMES           reduce using rule 33 (expression -> token .)
    DIVIDE          reduce using rule 33 (expression -> token .)
    EQUAL           reduce using rule 33 (expression -> token .)
    LPAREN          reduce using rule 33 (expression -> token .)
    LSQUAREDBRACKET reduce using rule 33 (expression -> token .)
    IDENTIFIER      reduce using rule 33 (expression -> token .)
    PRINT           reduce using rule 33 (expression -> token .)
    IF              reduce using rule 33 (expression -> token .)
    FOR             reduce using rule 33 (expression -> token .)
    WHILE           reduce using rule 33 (expression -> token .)
    COLON           reduce using rule 33 (expression -> token .)
    INTEGER         reduce using rule 33 (expression -> token .)
    FLOAT           reduce using rule 33 (expression -> token .)
    STRING          reduce using rule 33 (expression -> token .)
    TRUE            reduce using rule 33 (expression -> token .)
    FALSE           reduce using rule 33 (expression -> token .)
    $end            reduce using rule 33 (expression -> token .)
    ENDIF           reduce using rule 33 (expression -> token .)
    ELSE            reduce using rule 33 (expression -> token .)
    RPAREN          reduce using rule 33 (expression -> token .)
    RSQUAREDBRACKET reduce using rule 33 (expression -> token .)
    IN              reduce using rule 33 (expression -> token .)
    COMMA           reduce using rule 33 (expression -> token .)


state 17

    (42) assignment_statement -> IDENTIFIER . EQUAL expression
    (43) function_call -> IDENTIFIER . LPAREN argument_list RPAREN
    (38) datatype -> IDENTIFIER .

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    EQUAL           shift and go to state 39
    LPAREN          shift and go to state 40
    GREATERTHAN     reduce using rule 38 (datatype -> IDENTIFIER .)
    PLUS            reduce using rule 38 (datatype -> IDENTIFIER .)
    MINUS           reduce using rule 38 (datatype -> IDENTIFIER .)
    TIMES           reduce using rule 38 (datatype -> IDENTIFIER .)
    DIVIDE          reduce using rule 38 (datatype -> IDENTIFIER .)
    LSQUAREDBRACKET reduce using rule 38 (datatype -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 38 (datatype -> IDENTIFIER .)
    PRINT           reduce using rule 38 (datatype -> IDENTIFIER .)
    IF              reduce using rule 38 (datatype -> IDENTIFIER .)
    FOR             reduce using rule 38 (datatype -> IDENTIFIER .)
    WHILE           reduce using rule 38 (datatype -> IDENTIFIER .)
    COLON           reduce using rule 38 (datatype -> IDENTIFIER .)
    INTEGER         reduce using rule 38 (datatype -> IDENTIFIER .)
    FLOAT           reduce using rule 38 (datatype -> IDENTIFIER .)
    STRING          reduce using rule 38 (datatype -> IDENTIFIER .)
    TRUE            reduce using rule 38 (datatype -> IDENTIFIER .)
    FALSE           reduce using rule 38 (datatype -> IDENTIFIER .)
    $end            reduce using rule 38 (datatype -> IDENTIFIER .)
    ENDIF           reduce using rule 38 (datatype -> IDENTIFIER .)
    ELSE            reduce using rule 38 (datatype -> IDENTIFIER .)

  ! EQUAL           [ reduce using rule 38 (datatype -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 38 (datatype -> IDENTIFIER .) ]


state 18

    (24) print_statement -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 41


state 19

    (17) inline_if_statement -> IF . expression COLON statements ENDIF
    (18) inline_if_statement -> IF . expression COLON statements ELSE statements
    (25) expression -> . expression GREATERTHAN datatype
    (26) expression -> . expression PLUS datatype
    (27) expression -> . expression MINUS datatype
    (28) expression -> . expression TIMES datatype
    (29) expression -> . expression DIVIDE datatype
    (30) expression -> . expression EQUAL datatype
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . LSQUAREDBRACKET expression RSQUAREDBRACKET
    (33) expression -> . token
    (34) expression -> . datatype
    (40) token -> . COLON
    (41) token -> . EQUAL
    (35) datatype -> . INTEGER
    (36) datatype -> . FLOAT
    (37) datatype -> . STRING
    (38) datatype -> . IDENTIFIER
    (39) datatype -> . bool
    (22) bool -> . TRUE
    (23) bool -> . FALSE

    LPAREN          shift and go to state 14
    LSQUAREDBRACKET shift and go to state 15
    COLON           shift and go to state 20
    EQUAL           shift and go to state 13
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25
    IDENTIFIER      shift and go to state 37
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 42
    datatype                       shift and go to state 12
    token                          shift and go to state 16
    bool                           shift and go to state 26

state 20

    (40) token -> COLON .

    GREATERTHAN     reduce using rule 40 (token -> COLON .)
    PLUS            reduce using rule 40 (token -> COLON .)
    MINUS           reduce using rule 40 (token -> COLON .)
    TIMES           reduce using rule 40 (token -> COLON .)
    DIVIDE          reduce using rule 40 (token -> COLON .)
    EQUAL           reduce using rule 40 (token -> COLON .)
    LPAREN          reduce using rule 40 (token -> COLON .)
    LSQUAREDBRACKET reduce using rule 40 (token -> COLON .)
    IDENTIFIER      reduce using rule 40 (token -> COLON .)
    PRINT           reduce using rule 40 (token -> COLON .)
    IF              reduce using rule 40 (token -> COLON .)
    FOR             reduce using rule 40 (token -> COLON .)
    WHILE           reduce using rule 40 (token -> COLON .)
    COLON           reduce using rule 40 (token -> COLON .)
    INTEGER         reduce using rule 40 (token -> COLON .)
    FLOAT           reduce using rule 40 (token -> COLON .)
    STRING          reduce using rule 40 (token -> COLON .)
    TRUE            reduce using rule 40 (token -> COLON .)
    FALSE           reduce using rule 40 (token -> COLON .)
    $end            reduce using rule 40 (token -> COLON .)
    ENDIF           reduce using rule 40 (token -> COLON .)
    ELSE            reduce using rule 40 (token -> COLON .)
    RPAREN          reduce using rule 40 (token -> COLON .)
    RSQUAREDBRACKET reduce using rule 40 (token -> COLON .)
    IN              reduce using rule 40 (token -> COLON .)
    COMMA           reduce using rule 40 (token -> COLON .)


state 21

    (19) for_statement -> FOR . expression IN range_expression
    (25) expression -> . expression GREATERTHAN datatype
    (26) expression -> . expression PLUS datatype
    (27) expression -> . expression MINUS datatype
    (28) expression -> . expression TIMES datatype
    (29) expression -> . expression DIVIDE datatype
    (30) expression -> . expression EQUAL datatype
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . LSQUAREDBRACKET expression RSQUAREDBRACKET
    (33) expression -> . token
    (34) expression -> . datatype
    (40) token -> . COLON
    (41) token -> . EQUAL
    (35) datatype -> . INTEGER
    (36) datatype -> . FLOAT
    (37) datatype -> . STRING
    (38) datatype -> . IDENTIFIER
    (39) datatype -> . bool
    (22) bool -> . TRUE
    (23) bool -> . FALSE

    LPAREN          shift and go to state 14
    LSQUAREDBRACKET shift and go to state 15
    COLON           shift and go to state 20
    EQUAL           shift and go to state 13
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25
    IDENTIFIER      shift and go to state 37
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 43
    datatype                       shift and go to state 12
    token                          shift and go to state 16
    bool                           shift and go to state 26

state 22

    (21) while_statement -> WHILE . expression COLON statements
    (25) expression -> . expression GREATERTHAN datatype
    (26) expression -> . expression PLUS datatype
    (27) expression -> . expression MINUS datatype
    (28) expression -> . expression TIMES datatype
    (29) expression -> . expression DIVIDE datatype
    (30) expression -> . expression EQUAL datatype
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . LSQUAREDBRACKET expression RSQUAREDBRACKET
    (33) expression -> . token
    (34) expression -> . datatype
    (40) token -> . COLON
    (41) token -> . EQUAL
    (35) datatype -> . INTEGER
    (36) datatype -> . FLOAT
    (37) datatype -> . STRING
    (38) datatype -> . IDENTIFIER
    (39) datatype -> . bool
    (22) bool -> . TRUE
    (23) bool -> . FALSE

    LPAREN          shift and go to state 14
    LSQUAREDBRACKET shift and go to state 15
    COLON           shift and go to state 20
    EQUAL           shift and go to state 13
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25
    IDENTIFIER      shift and go to state 37
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 44
    datatype                       shift and go to state 12
    token                          shift and go to state 16
    bool                           shift and go to state 26

state 23

    (35) datatype -> INTEGER .

    GREATERTHAN     reduce using rule 35 (datatype -> INTEGER .)
    PLUS            reduce using rule 35 (datatype -> INTEGER .)
    MINUS           reduce using rule 35 (datatype -> INTEGER .)
    TIMES           reduce using rule 35 (datatype -> INTEGER .)
    DIVIDE          reduce using rule 35 (datatype -> INTEGER .)
    EQUAL           reduce using rule 35 (datatype -> INTEGER .)
    LPAREN          reduce using rule 35 (datatype -> INTEGER .)
    LSQUAREDBRACKET reduce using rule 35 (datatype -> INTEGER .)
    IDENTIFIER      reduce using rule 35 (datatype -> INTEGER .)
    PRINT           reduce using rule 35 (datatype -> INTEGER .)
    IF              reduce using rule 35 (datatype -> INTEGER .)
    FOR             reduce using rule 35 (datatype -> INTEGER .)
    WHILE           reduce using rule 35 (datatype -> INTEGER .)
    COLON           reduce using rule 35 (datatype -> INTEGER .)
    INTEGER         reduce using rule 35 (datatype -> INTEGER .)
    FLOAT           reduce using rule 35 (datatype -> INTEGER .)
    STRING          reduce using rule 35 (datatype -> INTEGER .)
    TRUE            reduce using rule 35 (datatype -> INTEGER .)
    FALSE           reduce using rule 35 (datatype -> INTEGER .)
    $end            reduce using rule 35 (datatype -> INTEGER .)
    ENDIF           reduce using rule 35 (datatype -> INTEGER .)
    ELSE            reduce using rule 35 (datatype -> INTEGER .)
    RPAREN          reduce using rule 35 (datatype -> INTEGER .)
    RSQUAREDBRACKET reduce using rule 35 (datatype -> INTEGER .)
    IN              reduce using rule 35 (datatype -> INTEGER .)
    COMMA           reduce using rule 35 (datatype -> INTEGER .)


state 24

    (36) datatype -> FLOAT .

    GREATERTHAN     reduce using rule 36 (datatype -> FLOAT .)
    PLUS            reduce using rule 36 (datatype -> FLOAT .)
    MINUS           reduce using rule 36 (datatype -> FLOAT .)
    TIMES           reduce using rule 36 (datatype -> FLOAT .)
    DIVIDE          reduce using rule 36 (datatype -> FLOAT .)
    EQUAL           reduce using rule 36 (datatype -> FLOAT .)
    LPAREN          reduce using rule 36 (datatype -> FLOAT .)
    LSQUAREDBRACKET reduce using rule 36 (datatype -> FLOAT .)
    IDENTIFIER      reduce using rule 36 (datatype -> FLOAT .)
    PRINT           reduce using rule 36 (datatype -> FLOAT .)
    IF              reduce using rule 36 (datatype -> FLOAT .)
    FOR             reduce using rule 36 (datatype -> FLOAT .)
    WHILE           reduce using rule 36 (datatype -> FLOAT .)
    COLON           reduce using rule 36 (datatype -> FLOAT .)
    INTEGER         reduce using rule 36 (datatype -> FLOAT .)
    FLOAT           reduce using rule 36 (datatype -> FLOAT .)
    STRING          reduce using rule 36 (datatype -> FLOAT .)
    TRUE            reduce using rule 36 (datatype -> FLOAT .)
    FALSE           reduce using rule 36 (datatype -> FLOAT .)
    $end            reduce using rule 36 (datatype -> FLOAT .)
    ENDIF           reduce using rule 36 (datatype -> FLOAT .)
    ELSE            reduce using rule 36 (datatype -> FLOAT .)
    RPAREN          reduce using rule 36 (datatype -> FLOAT .)
    RSQUAREDBRACKET reduce using rule 36 (datatype -> FLOAT .)
    IN              reduce using rule 36 (datatype -> FLOAT .)
    COMMA           reduce using rule 36 (datatype -> FLOAT .)


state 25

    (37) datatype -> STRING .

    GREATERTHAN     reduce using rule 37 (datatype -> STRING .)
    PLUS            reduce using rule 37 (datatype -> STRING .)
    MINUS           reduce using rule 37 (datatype -> STRING .)
    TIMES           reduce using rule 37 (datatype -> STRING .)
    DIVIDE          reduce using rule 37 (datatype -> STRING .)
    EQUAL           reduce using rule 37 (datatype -> STRING .)
    LPAREN          reduce using rule 37 (datatype -> STRING .)
    LSQUAREDBRACKET reduce using rule 37 (datatype -> STRING .)
    IDENTIFIER      reduce using rule 37 (datatype -> STRING .)
    PRINT           reduce using rule 37 (datatype -> STRING .)
    IF              reduce using rule 37 (datatype -> STRING .)
    FOR             reduce using rule 37 (datatype -> STRING .)
    WHILE           reduce using rule 37 (datatype -> STRING .)
    COLON           reduce using rule 37 (datatype -> STRING .)
    INTEGER         reduce using rule 37 (datatype -> STRING .)
    FLOAT           reduce using rule 37 (datatype -> STRING .)
    STRING          reduce using rule 37 (datatype -> STRING .)
    TRUE            reduce using rule 37 (datatype -> STRING .)
    FALSE           reduce using rule 37 (datatype -> STRING .)
    $end            reduce using rule 37 (datatype -> STRING .)
    ENDIF           reduce using rule 37 (datatype -> STRING .)
    ELSE            reduce using rule 37 (datatype -> STRING .)
    RPAREN          reduce using rule 37 (datatype -> STRING .)
    RSQUAREDBRACKET reduce using rule 37 (datatype -> STRING .)
    IN              reduce using rule 37 (datatype -> STRING .)
    COMMA           reduce using rule 37 (datatype -> STRING .)


state 26

    (39) datatype -> bool .

    GREATERTHAN     reduce using rule 39 (datatype -> bool .)
    PLUS            reduce using rule 39 (datatype -> bool .)
    MINUS           reduce using rule 39 (datatype -> bool .)
    TIMES           reduce using rule 39 (datatype -> bool .)
    DIVIDE          reduce using rule 39 (datatype -> bool .)
    EQUAL           reduce using rule 39 (datatype -> bool .)
    LPAREN          reduce using rule 39 (datatype -> bool .)
    LSQUAREDBRACKET reduce using rule 39 (datatype -> bool .)
    IDENTIFIER      reduce using rule 39 (datatype -> bool .)
    PRINT           reduce using rule 39 (datatype -> bool .)
    IF              reduce using rule 39 (datatype -> bool .)
    FOR             reduce using rule 39 (datatype -> bool .)
    WHILE           reduce using rule 39 (datatype -> bool .)
    COLON           reduce using rule 39 (datatype -> bool .)
    INTEGER         reduce using rule 39 (datatype -> bool .)
    FLOAT           reduce using rule 39 (datatype -> bool .)
    STRING          reduce using rule 39 (datatype -> bool .)
    TRUE            reduce using rule 39 (datatype -> bool .)
    FALSE           reduce using rule 39 (datatype -> bool .)
    $end            reduce using rule 39 (datatype -> bool .)
    ENDIF           reduce using rule 39 (datatype -> bool .)
    ELSE            reduce using rule 39 (datatype -> bool .)
    RPAREN          reduce using rule 39 (datatype -> bool .)
    RSQUAREDBRACKET reduce using rule 39 (datatype -> bool .)
    IN              reduce using rule 39 (datatype -> bool .)
    COMMA           reduce using rule 39 (datatype -> bool .)


state 27

    (22) bool -> TRUE .

    GREATERTHAN     reduce using rule 22 (bool -> TRUE .)
    PLUS            reduce using rule 22 (bool -> TRUE .)
    MINUS           reduce using rule 22 (bool -> TRUE .)
    TIMES           reduce using rule 22 (bool -> TRUE .)
    DIVIDE          reduce using rule 22 (bool -> TRUE .)
    EQUAL           reduce using rule 22 (bool -> TRUE .)
    LPAREN          reduce using rule 22 (bool -> TRUE .)
    LSQUAREDBRACKET reduce using rule 22 (bool -> TRUE .)
    IDENTIFIER      reduce using rule 22 (bool -> TRUE .)
    PRINT           reduce using rule 22 (bool -> TRUE .)
    IF              reduce using rule 22 (bool -> TRUE .)
    FOR             reduce using rule 22 (bool -> TRUE .)
    WHILE           reduce using rule 22 (bool -> TRUE .)
    COLON           reduce using rule 22 (bool -> TRUE .)
    INTEGER         reduce using rule 22 (bool -> TRUE .)
    FLOAT           reduce using rule 22 (bool -> TRUE .)
    STRING          reduce using rule 22 (bool -> TRUE .)
    TRUE            reduce using rule 22 (bool -> TRUE .)
    FALSE           reduce using rule 22 (bool -> TRUE .)
    $end            reduce using rule 22 (bool -> TRUE .)
    ENDIF           reduce using rule 22 (bool -> TRUE .)
    ELSE            reduce using rule 22 (bool -> TRUE .)
    RPAREN          reduce using rule 22 (bool -> TRUE .)
    RSQUAREDBRACKET reduce using rule 22 (bool -> TRUE .)
    IN              reduce using rule 22 (bool -> TRUE .)
    COMMA           reduce using rule 22 (bool -> TRUE .)


state 28

    (23) bool -> FALSE .

    GREATERTHAN     reduce using rule 23 (bool -> FALSE .)
    PLUS            reduce using rule 23 (bool -> FALSE .)
    MINUS           reduce using rule 23 (bool -> FALSE .)
    TIMES           reduce using rule 23 (bool -> FALSE .)
    DIVIDE          reduce using rule 23 (bool -> FALSE .)
    EQUAL           reduce using rule 23 (bool -> FALSE .)
    LPAREN          reduce using rule 23 (bool -> FALSE .)
    LSQUAREDBRACKET reduce using rule 23 (bool -> FALSE .)
    IDENTIFIER      reduce using rule 23 (bool -> FALSE .)
    PRINT           reduce using rule 23 (bool -> FALSE .)
    IF              reduce using rule 23 (bool -> FALSE .)
    FOR             reduce using rule 23 (bool -> FALSE .)
    WHILE           reduce using rule 23 (bool -> FALSE .)
    COLON           reduce using rule 23 (bool -> FALSE .)
    INTEGER         reduce using rule 23 (bool -> FALSE .)
    FLOAT           reduce using rule 23 (bool -> FALSE .)
    STRING          reduce using rule 23 (bool -> FALSE .)
    TRUE            reduce using rule 23 (bool -> FALSE .)
    FALSE           reduce using rule 23 (bool -> FALSE .)
    $end            reduce using rule 23 (bool -> FALSE .)
    ENDIF           reduce using rule 23 (bool -> FALSE .)
    ELSE            reduce using rule 23 (bool -> FALSE .)
    RPAREN          reduce using rule 23 (bool -> FALSE .)
    RSQUAREDBRACKET reduce using rule 23 (bool -> FALSE .)
    IN              reduce using rule 23 (bool -> FALSE .)
    COMMA           reduce using rule 23 (bool -> FALSE .)


state 29

    (1) statements -> statement statements .

    $end            reduce using rule 1 (statements -> statement statements .)
    ENDIF           reduce using rule 1 (statements -> statement statements .)
    ELSE            reduce using rule 1 (statements -> statement statements .)
    LPAREN          reduce using rule 1 (statements -> statement statements .)
    LSQUAREDBRACKET reduce using rule 1 (statements -> statement statements .)
    IDENTIFIER      reduce using rule 1 (statements -> statement statements .)
    PRINT           reduce using rule 1 (statements -> statement statements .)
    IF              reduce using rule 1 (statements -> statement statements .)
    FOR             reduce using rule 1 (statements -> statement statements .)
    WHILE           reduce using rule 1 (statements -> statement statements .)
    COLON           reduce using rule 1 (statements -> statement statements .)
    EQUAL           reduce using rule 1 (statements -> statement statements .)
    INTEGER         reduce using rule 1 (statements -> statement statements .)
    FLOAT           reduce using rule 1 (statements -> statement statements .)
    STRING          reduce using rule 1 (statements -> statement statements .)
    TRUE            reduce using rule 1 (statements -> statement statements .)
    FALSE           reduce using rule 1 (statements -> statement statements .)


state 30

    (25) expression -> expression GREATERTHAN . datatype
    (35) datatype -> . INTEGER
    (36) datatype -> . FLOAT
    (37) datatype -> . STRING
    (38) datatype -> . IDENTIFIER
    (39) datatype -> . bool
    (22) bool -> . TRUE
    (23) bool -> . FALSE

    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25
    IDENTIFIER      shift and go to state 37
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    datatype                       shift and go to state 45
    bool                           shift and go to state 26

state 31

    (26) expression -> expression PLUS . datatype
    (35) datatype -> . INTEGER
    (36) datatype -> . FLOAT
    (37) datatype -> . STRING
    (38) datatype -> . IDENTIFIER
    (39) datatype -> . bool
    (22) bool -> . TRUE
    (23) bool -> . FALSE

    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25
    IDENTIFIER      shift and go to state 37
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    datatype                       shift and go to state 46
    bool                           shift and go to state 26

state 32

    (27) expression -> expression MINUS . datatype
    (35) datatype -> . INTEGER
    (36) datatype -> . FLOAT
    (37) datatype -> . STRING
    (38) datatype -> . IDENTIFIER
    (39) datatype -> . bool
    (22) bool -> . TRUE
    (23) bool -> . FALSE

    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25
    IDENTIFIER      shift and go to state 37
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    datatype                       shift and go to state 47
    bool                           shift and go to state 26

state 33

    (28) expression -> expression TIMES . datatype
    (35) datatype -> . INTEGER
    (36) datatype -> . FLOAT
    (37) datatype -> . STRING
    (38) datatype -> . IDENTIFIER
    (39) datatype -> . bool
    (22) bool -> . TRUE
    (23) bool -> . FALSE

    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25
    IDENTIFIER      shift and go to state 37
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    datatype                       shift and go to state 48
    bool                           shift and go to state 26

state 34

    (29) expression -> expression DIVIDE . datatype
    (35) datatype -> . INTEGER
    (36) datatype -> . FLOAT
    (37) datatype -> . STRING
    (38) datatype -> . IDENTIFIER
    (39) datatype -> . bool
    (22) bool -> . TRUE
    (23) bool -> . FALSE

    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25
    IDENTIFIER      shift and go to state 37
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    datatype                       shift and go to state 49
    bool                           shift and go to state 26

state 35

    (30) expression -> expression EQUAL . datatype
    (35) datatype -> . INTEGER
    (36) datatype -> . FLOAT
    (37) datatype -> . STRING
    (38) datatype -> . IDENTIFIER
    (39) datatype -> . bool
    (22) bool -> . TRUE
    (23) bool -> . FALSE

    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25
    IDENTIFIER      shift and go to state 37
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    datatype                       shift and go to state 50
    bool                           shift and go to state 26

state 36

    (31) expression -> LPAREN expression . RPAREN
    (25) expression -> expression . GREATERTHAN datatype
    (26) expression -> expression . PLUS datatype
    (27) expression -> expression . MINUS datatype
    (28) expression -> expression . TIMES datatype
    (29) expression -> expression . DIVIDE datatype
    (30) expression -> expression . EQUAL datatype

    RPAREN          shift and go to state 51
    GREATERTHAN     shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    EQUAL           shift and go to state 35


state 37

    (38) datatype -> IDENTIFIER .

    RPAREN          reduce using rule 38 (datatype -> IDENTIFIER .)
    GREATERTHAN     reduce using rule 38 (datatype -> IDENTIFIER .)
    PLUS            reduce using rule 38 (datatype -> IDENTIFIER .)
    MINUS           reduce using rule 38 (datatype -> IDENTIFIER .)
    TIMES           reduce using rule 38 (datatype -> IDENTIFIER .)
    DIVIDE          reduce using rule 38 (datatype -> IDENTIFIER .)
    EQUAL           reduce using rule 38 (datatype -> IDENTIFIER .)
    RSQUAREDBRACKET reduce using rule 38 (datatype -> IDENTIFIER .)
    COLON           reduce using rule 38 (datatype -> IDENTIFIER .)
    IN              reduce using rule 38 (datatype -> IDENTIFIER .)
    LPAREN          reduce using rule 38 (datatype -> IDENTIFIER .)
    LSQUAREDBRACKET reduce using rule 38 (datatype -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 38 (datatype -> IDENTIFIER .)
    PRINT           reduce using rule 38 (datatype -> IDENTIFIER .)
    IF              reduce using rule 38 (datatype -> IDENTIFIER .)
    FOR             reduce using rule 38 (datatype -> IDENTIFIER .)
    WHILE           reduce using rule 38 (datatype -> IDENTIFIER .)
    INTEGER         reduce using rule 38 (datatype -> IDENTIFIER .)
    FLOAT           reduce using rule 38 (datatype -> IDENTIFIER .)
    STRING          reduce using rule 38 (datatype -> IDENTIFIER .)
    TRUE            reduce using rule 38 (datatype -> IDENTIFIER .)
    FALSE           reduce using rule 38 (datatype -> IDENTIFIER .)
    $end            reduce using rule 38 (datatype -> IDENTIFIER .)
    ENDIF           reduce using rule 38 (datatype -> IDENTIFIER .)
    ELSE            reduce using rule 38 (datatype -> IDENTIFIER .)
    COMMA           reduce using rule 38 (datatype -> IDENTIFIER .)


state 38

    (32) expression -> LSQUAREDBRACKET expression . RSQUAREDBRACKET
    (25) expression -> expression . GREATERTHAN datatype
    (26) expression -> expression . PLUS datatype
    (27) expression -> expression . MINUS datatype
    (28) expression -> expression . TIMES datatype
    (29) expression -> expression . DIVIDE datatype
    (30) expression -> expression . EQUAL datatype

    RSQUAREDBRACKET shift and go to state 52
    GREATERTHAN     shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    EQUAL           shift and go to state 35


state 39

    (42) assignment_statement -> IDENTIFIER EQUAL . expression
    (25) expression -> . expression GREATERTHAN datatype
    (26) expression -> . expression PLUS datatype
    (27) expression -> . expression MINUS datatype
    (28) expression -> . expression TIMES datatype
    (29) expression -> . expression DIVIDE datatype
    (30) expression -> . expression EQUAL datatype
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . LSQUAREDBRACKET expression RSQUAREDBRACKET
    (33) expression -> . token
    (34) expression -> . datatype
    (40) token -> . COLON
    (41) token -> . EQUAL
    (35) datatype -> . INTEGER
    (36) datatype -> . FLOAT
    (37) datatype -> . STRING
    (38) datatype -> . IDENTIFIER
    (39) datatype -> . bool
    (22) bool -> . TRUE
    (23) bool -> . FALSE

    LPAREN          shift and go to state 14
    LSQUAREDBRACKET shift and go to state 15
    COLON           shift and go to state 20
    EQUAL           shift and go to state 13
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25
    IDENTIFIER      shift and go to state 37
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 53
    datatype                       shift and go to state 12
    token                          shift and go to state 16
    bool                           shift and go to state 26

state 40

    (43) function_call -> IDENTIFIER LPAREN . argument_list RPAREN
    (44) argument_list -> . datatype IDENTIFIER COMMA argument_list
    (45) argument_list -> . datatype IDENTIFIER
    (46) argument_list -> . empty
    (35) datatype -> . INTEGER
    (36) datatype -> . FLOAT
    (37) datatype -> . STRING
    (38) datatype -> . IDENTIFIER
    (39) datatype -> . bool
    (47) empty -> .
    (22) bool -> . TRUE
    (23) bool -> . FALSE

    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25
    IDENTIFIER      shift and go to state 37
    RPAREN          reduce using rule 47 (empty -> .)
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    argument_list                  shift and go to state 54
    datatype                       shift and go to state 55
    empty                          shift and go to state 56
    bool                           shift and go to state 26

state 41

    (24) print_statement -> PRINT LPAREN . expression RPAREN
    (25) expression -> . expression GREATERTHAN datatype
    (26) expression -> . expression PLUS datatype
    (27) expression -> . expression MINUS datatype
    (28) expression -> . expression TIMES datatype
    (29) expression -> . expression DIVIDE datatype
    (30) expression -> . expression EQUAL datatype
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . LSQUAREDBRACKET expression RSQUAREDBRACKET
    (33) expression -> . token
    (34) expression -> . datatype
    (40) token -> . COLON
    (41) token -> . EQUAL
    (35) datatype -> . INTEGER
    (36) datatype -> . FLOAT
    (37) datatype -> . STRING
    (38) datatype -> . IDENTIFIER
    (39) datatype -> . bool
    (22) bool -> . TRUE
    (23) bool -> . FALSE

    LPAREN          shift and go to state 14
    LSQUAREDBRACKET shift and go to state 15
    COLON           shift and go to state 20
    EQUAL           shift and go to state 13
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25
    IDENTIFIER      shift and go to state 37
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 57
    datatype                       shift and go to state 12
    token                          shift and go to state 16
    bool                           shift and go to state 26

state 42

    (17) inline_if_statement -> IF expression . COLON statements ENDIF
    (18) inline_if_statement -> IF expression . COLON statements ELSE statements
    (25) expression -> expression . GREATERTHAN datatype
    (26) expression -> expression . PLUS datatype
    (27) expression -> expression . MINUS datatype
    (28) expression -> expression . TIMES datatype
    (29) expression -> expression . DIVIDE datatype
    (30) expression -> expression . EQUAL datatype

    COLON           shift and go to state 58
    GREATERTHAN     shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    EQUAL           shift and go to state 35


state 43

    (19) for_statement -> FOR expression . IN range_expression
    (25) expression -> expression . GREATERTHAN datatype
    (26) expression -> expression . PLUS datatype
    (27) expression -> expression . MINUS datatype
    (28) expression -> expression . TIMES datatype
    (29) expression -> expression . DIVIDE datatype
    (30) expression -> expression . EQUAL datatype

    IN              shift and go to state 59
    GREATERTHAN     shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    EQUAL           shift and go to state 35


state 44

    (21) while_statement -> WHILE expression . COLON statements
    (25) expression -> expression . GREATERTHAN datatype
    (26) expression -> expression . PLUS datatype
    (27) expression -> expression . MINUS datatype
    (28) expression -> expression . TIMES datatype
    (29) expression -> expression . DIVIDE datatype
    (30) expression -> expression . EQUAL datatype

    COLON           shift and go to state 60
    GREATERTHAN     shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    EQUAL           shift and go to state 35


state 45

    (25) expression -> expression GREATERTHAN datatype .

    GREATERTHAN     reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    PLUS            reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    MINUS           reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    TIMES           reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    DIVIDE          reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    EQUAL           reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    LPAREN          reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    LSQUAREDBRACKET reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    IDENTIFIER      reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    PRINT           reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    IF              reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    FOR             reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    WHILE           reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    COLON           reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    INTEGER         reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    FLOAT           reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    STRING          reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    TRUE            reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    FALSE           reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    $end            reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    ENDIF           reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    ELSE            reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    RPAREN          reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    RSQUAREDBRACKET reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    IN              reduce using rule 25 (expression -> expression GREATERTHAN datatype .)
    COMMA           reduce using rule 25 (expression -> expression GREATERTHAN datatype .)


state 46

    (26) expression -> expression PLUS datatype .

    GREATERTHAN     reduce using rule 26 (expression -> expression PLUS datatype .)
    PLUS            reduce using rule 26 (expression -> expression PLUS datatype .)
    MINUS           reduce using rule 26 (expression -> expression PLUS datatype .)
    TIMES           reduce using rule 26 (expression -> expression PLUS datatype .)
    DIVIDE          reduce using rule 26 (expression -> expression PLUS datatype .)
    EQUAL           reduce using rule 26 (expression -> expression PLUS datatype .)
    LPAREN          reduce using rule 26 (expression -> expression PLUS datatype .)
    LSQUAREDBRACKET reduce using rule 26 (expression -> expression PLUS datatype .)
    IDENTIFIER      reduce using rule 26 (expression -> expression PLUS datatype .)
    PRINT           reduce using rule 26 (expression -> expression PLUS datatype .)
    IF              reduce using rule 26 (expression -> expression PLUS datatype .)
    FOR             reduce using rule 26 (expression -> expression PLUS datatype .)
    WHILE           reduce using rule 26 (expression -> expression PLUS datatype .)
    COLON           reduce using rule 26 (expression -> expression PLUS datatype .)
    INTEGER         reduce using rule 26 (expression -> expression PLUS datatype .)
    FLOAT           reduce using rule 26 (expression -> expression PLUS datatype .)
    STRING          reduce using rule 26 (expression -> expression PLUS datatype .)
    TRUE            reduce using rule 26 (expression -> expression PLUS datatype .)
    FALSE           reduce using rule 26 (expression -> expression PLUS datatype .)
    $end            reduce using rule 26 (expression -> expression PLUS datatype .)
    ENDIF           reduce using rule 26 (expression -> expression PLUS datatype .)
    ELSE            reduce using rule 26 (expression -> expression PLUS datatype .)
    RPAREN          reduce using rule 26 (expression -> expression PLUS datatype .)
    RSQUAREDBRACKET reduce using rule 26 (expression -> expression PLUS datatype .)
    IN              reduce using rule 26 (expression -> expression PLUS datatype .)
    COMMA           reduce using rule 26 (expression -> expression PLUS datatype .)


state 47

    (27) expression -> expression MINUS datatype .

    GREATERTHAN     reduce using rule 27 (expression -> expression MINUS datatype .)
    PLUS            reduce using rule 27 (expression -> expression MINUS datatype .)
    MINUS           reduce using rule 27 (expression -> expression MINUS datatype .)
    TIMES           reduce using rule 27 (expression -> expression MINUS datatype .)
    DIVIDE          reduce using rule 27 (expression -> expression MINUS datatype .)
    EQUAL           reduce using rule 27 (expression -> expression MINUS datatype .)
    LPAREN          reduce using rule 27 (expression -> expression MINUS datatype .)
    LSQUAREDBRACKET reduce using rule 27 (expression -> expression MINUS datatype .)
    IDENTIFIER      reduce using rule 27 (expression -> expression MINUS datatype .)
    PRINT           reduce using rule 27 (expression -> expression MINUS datatype .)
    IF              reduce using rule 27 (expression -> expression MINUS datatype .)
    FOR             reduce using rule 27 (expression -> expression MINUS datatype .)
    WHILE           reduce using rule 27 (expression -> expression MINUS datatype .)
    COLON           reduce using rule 27 (expression -> expression MINUS datatype .)
    INTEGER         reduce using rule 27 (expression -> expression MINUS datatype .)
    FLOAT           reduce using rule 27 (expression -> expression MINUS datatype .)
    STRING          reduce using rule 27 (expression -> expression MINUS datatype .)
    TRUE            reduce using rule 27 (expression -> expression MINUS datatype .)
    FALSE           reduce using rule 27 (expression -> expression MINUS datatype .)
    $end            reduce using rule 27 (expression -> expression MINUS datatype .)
    ENDIF           reduce using rule 27 (expression -> expression MINUS datatype .)
    ELSE            reduce using rule 27 (expression -> expression MINUS datatype .)
    RPAREN          reduce using rule 27 (expression -> expression MINUS datatype .)
    RSQUAREDBRACKET reduce using rule 27 (expression -> expression MINUS datatype .)
    IN              reduce using rule 27 (expression -> expression MINUS datatype .)
    COMMA           reduce using rule 27 (expression -> expression MINUS datatype .)


state 48

    (28) expression -> expression TIMES datatype .

    GREATERTHAN     reduce using rule 28 (expression -> expression TIMES datatype .)
    PLUS            reduce using rule 28 (expression -> expression TIMES datatype .)
    MINUS           reduce using rule 28 (expression -> expression TIMES datatype .)
    TIMES           reduce using rule 28 (expression -> expression TIMES datatype .)
    DIVIDE          reduce using rule 28 (expression -> expression TIMES datatype .)
    EQUAL           reduce using rule 28 (expression -> expression TIMES datatype .)
    LPAREN          reduce using rule 28 (expression -> expression TIMES datatype .)
    LSQUAREDBRACKET reduce using rule 28 (expression -> expression TIMES datatype .)
    IDENTIFIER      reduce using rule 28 (expression -> expression TIMES datatype .)
    PRINT           reduce using rule 28 (expression -> expression TIMES datatype .)
    IF              reduce using rule 28 (expression -> expression TIMES datatype .)
    FOR             reduce using rule 28 (expression -> expression TIMES datatype .)
    WHILE           reduce using rule 28 (expression -> expression TIMES datatype .)
    COLON           reduce using rule 28 (expression -> expression TIMES datatype .)
    INTEGER         reduce using rule 28 (expression -> expression TIMES datatype .)
    FLOAT           reduce using rule 28 (expression -> expression TIMES datatype .)
    STRING          reduce using rule 28 (expression -> expression TIMES datatype .)
    TRUE            reduce using rule 28 (expression -> expression TIMES datatype .)
    FALSE           reduce using rule 28 (expression -> expression TIMES datatype .)
    $end            reduce using rule 28 (expression -> expression TIMES datatype .)
    ENDIF           reduce using rule 28 (expression -> expression TIMES datatype .)
    ELSE            reduce using rule 28 (expression -> expression TIMES datatype .)
    RPAREN          reduce using rule 28 (expression -> expression TIMES datatype .)
    RSQUAREDBRACKET reduce using rule 28 (expression -> expression TIMES datatype .)
    IN              reduce using rule 28 (expression -> expression TIMES datatype .)
    COMMA           reduce using rule 28 (expression -> expression TIMES datatype .)


state 49

    (29) expression -> expression DIVIDE datatype .

    GREATERTHAN     reduce using rule 29 (expression -> expression DIVIDE datatype .)
    PLUS            reduce using rule 29 (expression -> expression DIVIDE datatype .)
    MINUS           reduce using rule 29 (expression -> expression DIVIDE datatype .)
    TIMES           reduce using rule 29 (expression -> expression DIVIDE datatype .)
    DIVIDE          reduce using rule 29 (expression -> expression DIVIDE datatype .)
    EQUAL           reduce using rule 29 (expression -> expression DIVIDE datatype .)
    LPAREN          reduce using rule 29 (expression -> expression DIVIDE datatype .)
    LSQUAREDBRACKET reduce using rule 29 (expression -> expression DIVIDE datatype .)
    IDENTIFIER      reduce using rule 29 (expression -> expression DIVIDE datatype .)
    PRINT           reduce using rule 29 (expression -> expression DIVIDE datatype .)
    IF              reduce using rule 29 (expression -> expression DIVIDE datatype .)
    FOR             reduce using rule 29 (expression -> expression DIVIDE datatype .)
    WHILE           reduce using rule 29 (expression -> expression DIVIDE datatype .)
    COLON           reduce using rule 29 (expression -> expression DIVIDE datatype .)
    INTEGER         reduce using rule 29 (expression -> expression DIVIDE datatype .)
    FLOAT           reduce using rule 29 (expression -> expression DIVIDE datatype .)
    STRING          reduce using rule 29 (expression -> expression DIVIDE datatype .)
    TRUE            reduce using rule 29 (expression -> expression DIVIDE datatype .)
    FALSE           reduce using rule 29 (expression -> expression DIVIDE datatype .)
    $end            reduce using rule 29 (expression -> expression DIVIDE datatype .)
    ENDIF           reduce using rule 29 (expression -> expression DIVIDE datatype .)
    ELSE            reduce using rule 29 (expression -> expression DIVIDE datatype .)
    RPAREN          reduce using rule 29 (expression -> expression DIVIDE datatype .)
    RSQUAREDBRACKET reduce using rule 29 (expression -> expression DIVIDE datatype .)
    IN              reduce using rule 29 (expression -> expression DIVIDE datatype .)
    COMMA           reduce using rule 29 (expression -> expression DIVIDE datatype .)


state 50

    (30) expression -> expression EQUAL datatype .

    GREATERTHAN     reduce using rule 30 (expression -> expression EQUAL datatype .)
    PLUS            reduce using rule 30 (expression -> expression EQUAL datatype .)
    MINUS           reduce using rule 30 (expression -> expression EQUAL datatype .)
    TIMES           reduce using rule 30 (expression -> expression EQUAL datatype .)
    DIVIDE          reduce using rule 30 (expression -> expression EQUAL datatype .)
    EQUAL           reduce using rule 30 (expression -> expression EQUAL datatype .)
    LPAREN          reduce using rule 30 (expression -> expression EQUAL datatype .)
    LSQUAREDBRACKET reduce using rule 30 (expression -> expression EQUAL datatype .)
    IDENTIFIER      reduce using rule 30 (expression -> expression EQUAL datatype .)
    PRINT           reduce using rule 30 (expression -> expression EQUAL datatype .)
    IF              reduce using rule 30 (expression -> expression EQUAL datatype .)
    FOR             reduce using rule 30 (expression -> expression EQUAL datatype .)
    WHILE           reduce using rule 30 (expression -> expression EQUAL datatype .)
    COLON           reduce using rule 30 (expression -> expression EQUAL datatype .)
    INTEGER         reduce using rule 30 (expression -> expression EQUAL datatype .)
    FLOAT           reduce using rule 30 (expression -> expression EQUAL datatype .)
    STRING          reduce using rule 30 (expression -> expression EQUAL datatype .)
    TRUE            reduce using rule 30 (expression -> expression EQUAL datatype .)
    FALSE           reduce using rule 30 (expression -> expression EQUAL datatype .)
    $end            reduce using rule 30 (expression -> expression EQUAL datatype .)
    ENDIF           reduce using rule 30 (expression -> expression EQUAL datatype .)
    ELSE            reduce using rule 30 (expression -> expression EQUAL datatype .)
    RPAREN          reduce using rule 30 (expression -> expression EQUAL datatype .)
    RSQUAREDBRACKET reduce using rule 30 (expression -> expression EQUAL datatype .)
    IN              reduce using rule 30 (expression -> expression EQUAL datatype .)
    COMMA           reduce using rule 30 (expression -> expression EQUAL datatype .)


state 51

    (31) expression -> LPAREN expression RPAREN .

    GREATERTHAN     reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    LSQUAREDBRACKET reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    INTEGER         reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    STRING          reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    ENDIF           reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    RSQUAREDBRACKET reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 31 (expression -> LPAREN expression RPAREN .)


state 52

    (32) expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .

    GREATERTHAN     reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    PLUS            reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    MINUS           reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    TIMES           reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    DIVIDE          reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    EQUAL           reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    LPAREN          reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    LSQUAREDBRACKET reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    IDENTIFIER      reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    PRINT           reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    IF              reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    FOR             reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    WHILE           reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    COLON           reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    INTEGER         reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    FLOAT           reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    STRING          reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    TRUE            reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    FALSE           reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    $end            reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    ENDIF           reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    ELSE            reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    RPAREN          reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    RSQUAREDBRACKET reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    IN              reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)
    COMMA           reduce using rule 32 (expression -> LSQUAREDBRACKET expression RSQUAREDBRACKET .)


state 53

    (42) assignment_statement -> IDENTIFIER EQUAL expression .
    (25) expression -> expression . GREATERTHAN datatype
    (26) expression -> expression . PLUS datatype
    (27) expression -> expression . MINUS datatype
    (28) expression -> expression . TIMES datatype
    (29) expression -> expression . DIVIDE datatype
    (30) expression -> expression . EQUAL datatype

  ! shift/reduce conflict for EQUAL resolved as shift
    LPAREN          reduce using rule 42 (assignment_statement -> IDENTIFIER EQUAL expression .)
    LSQUAREDBRACKET reduce using rule 42 (assignment_statement -> IDENTIFIER EQUAL expression .)
    IDENTIFIER      reduce using rule 42 (assignment_statement -> IDENTIFIER EQUAL expression .)
    PRINT           reduce using rule 42 (assignment_statement -> IDENTIFIER EQUAL expression .)
    IF              reduce using rule 42 (assignment_statement -> IDENTIFIER EQUAL expression .)
    FOR             reduce using rule 42 (assignment_statement -> IDENTIFIER EQUAL expression .)
    WHILE           reduce using rule 42 (assignment_statement -> IDENTIFIER EQUAL expression .)
    COLON           reduce using rule 42 (assignment_statement -> IDENTIFIER EQUAL expression .)
    INTEGER         reduce using rule 42 (assignment_statement -> IDENTIFIER EQUAL expression .)
    FLOAT           reduce using rule 42 (assignment_statement -> IDENTIFIER EQUAL expression .)
    STRING          reduce using rule 42 (assignment_statement -> IDENTIFIER EQUAL expression .)
    TRUE            reduce using rule 42 (assignment_statement -> IDENTIFIER EQUAL expression .)
    FALSE           reduce using rule 42 (assignment_statement -> IDENTIFIER EQUAL expression .)
    $end            reduce using rule 42 (assignment_statement -> IDENTIFIER EQUAL expression .)
    ENDIF           reduce using rule 42 (assignment_statement -> IDENTIFIER EQUAL expression .)
    ELSE            reduce using rule 42 (assignment_statement -> IDENTIFIER EQUAL expression .)
    GREATERTHAN     shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    EQUAL           shift and go to state 35

  ! EQUAL           [ reduce using rule 42 (assignment_statement -> IDENTIFIER EQUAL expression .) ]


state 54

    (43) function_call -> IDENTIFIER LPAREN argument_list . RPAREN

    RPAREN          shift and go to state 61


state 55

    (44) argument_list -> datatype . IDENTIFIER COMMA argument_list
    (45) argument_list -> datatype . IDENTIFIER

    IDENTIFIER      shift and go to state 62


state 56

    (46) argument_list -> empty .

    RPAREN          reduce using rule 46 (argument_list -> empty .)


state 57

    (24) print_statement -> PRINT LPAREN expression . RPAREN
    (25) expression -> expression . GREATERTHAN datatype
    (26) expression -> expression . PLUS datatype
    (27) expression -> expression . MINUS datatype
    (28) expression -> expression . TIMES datatype
    (29) expression -> expression . DIVIDE datatype
    (30) expression -> expression . EQUAL datatype

    RPAREN          shift and go to state 63
    GREATERTHAN     shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    EQUAL           shift and go to state 35


state 58

    (17) inline_if_statement -> IF expression COLON . statements ENDIF
    (18) inline_if_statement -> IF expression COLON . statements ELSE statements
    (1) statements -> . statement statements
    (2) statements -> . statement
    (3) statements -> . empty
    (4) statement -> . conditional
    (5) statement -> . expression
    (6) statement -> . assignment_statement
    (7) statement -> . function_call
    (8) statement -> . print_statement
    (9) statement -> . empty
    (47) empty -> .
    (10) conditional -> . inline_if_statement
    (11) conditional -> . for_statement
    (12) conditional -> . while_statement
    (25) expression -> . expression GREATERTHAN datatype
    (26) expression -> . expression PLUS datatype
    (27) expression -> . expression MINUS datatype
    (28) expression -> . expression TIMES datatype
    (29) expression -> . expression DIVIDE datatype
    (30) expression -> . expression EQUAL datatype
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . LSQUAREDBRACKET expression RSQUAREDBRACKET
    (33) expression -> . token
    (34) expression -> . datatype
    (42) assignment_statement -> . IDENTIFIER EQUAL expression
    (43) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (24) print_statement -> . PRINT LPAREN expression RPAREN
    (17) inline_if_statement -> . IF expression COLON statements ENDIF
    (18) inline_if_statement -> . IF expression COLON statements ELSE statements
    (19) for_statement -> . FOR expression IN range_expression
    (21) while_statement -> . WHILE expression COLON statements
    (40) token -> . COLON
    (41) token -> . EQUAL
    (35) datatype -> . INTEGER
    (36) datatype -> . FLOAT
    (37) datatype -> . STRING
    (38) datatype -> . IDENTIFIER
    (39) datatype -> . bool
    (22) bool -> . TRUE
    (23) bool -> . FALSE

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQUAREDBRACKET resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    ENDIF           reduce using rule 47 (empty -> .)
    ELSE            reduce using rule 47 (empty -> .)
    LPAREN          shift and go to state 14
    LSQUAREDBRACKET shift and go to state 15
    IDENTIFIER      shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    COLON           shift and go to state 20
    EQUAL           shift and go to state 13
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

  ! LPAREN          [ reduce using rule 47 (empty -> .) ]
  ! LSQUAREDBRACKET [ reduce using rule 47 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 47 (empty -> .) ]
  ! PRINT           [ reduce using rule 47 (empty -> .) ]
  ! IF              [ reduce using rule 47 (empty -> .) ]
  ! FOR             [ reduce using rule 47 (empty -> .) ]
  ! WHILE           [ reduce using rule 47 (empty -> .) ]
  ! COLON           [ reduce using rule 47 (empty -> .) ]
  ! EQUAL           [ reduce using rule 47 (empty -> .) ]
  ! INTEGER         [ reduce using rule 47 (empty -> .) ]
  ! FLOAT           [ reduce using rule 47 (empty -> .) ]
  ! STRING          [ reduce using rule 47 (empty -> .) ]
  ! TRUE            [ reduce using rule 47 (empty -> .) ]
  ! FALSE           [ reduce using rule 47 (empty -> .) ]

    expression                     shift and go to state 5
    statements                     shift and go to state 64
    statement                      shift and go to state 2
    empty                          shift and go to state 3
    conditional                    shift and go to state 4
    assignment_statement           shift and go to state 6
    function_call                  shift and go to state 7
    print_statement                shift and go to state 8
    inline_if_statement            shift and go to state 9
    for_statement                  shift and go to state 10
    while_statement                shift and go to state 11
    datatype                       shift and go to state 12
    token                          shift and go to state 16
    bool                           shift and go to state 26

state 59

    (19) for_statement -> FOR expression IN . range_expression
    (20) range_expression -> . RANGE expression COMMA expression

    RANGE           shift and go to state 66

    range_expression               shift and go to state 65

state 60

    (21) while_statement -> WHILE expression COLON . statements
    (1) statements -> . statement statements
    (2) statements -> . statement
    (3) statements -> . empty
    (4) statement -> . conditional
    (5) statement -> . expression
    (6) statement -> . assignment_statement
    (7) statement -> . function_call
    (8) statement -> . print_statement
    (9) statement -> . empty
    (47) empty -> .
    (10) conditional -> . inline_if_statement
    (11) conditional -> . for_statement
    (12) conditional -> . while_statement
    (25) expression -> . expression GREATERTHAN datatype
    (26) expression -> . expression PLUS datatype
    (27) expression -> . expression MINUS datatype
    (28) expression -> . expression TIMES datatype
    (29) expression -> . expression DIVIDE datatype
    (30) expression -> . expression EQUAL datatype
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . LSQUAREDBRACKET expression RSQUAREDBRACKET
    (33) expression -> . token
    (34) expression -> . datatype
    (42) assignment_statement -> . IDENTIFIER EQUAL expression
    (43) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (24) print_statement -> . PRINT LPAREN expression RPAREN
    (17) inline_if_statement -> . IF expression COLON statements ENDIF
    (18) inline_if_statement -> . IF expression COLON statements ELSE statements
    (19) for_statement -> . FOR expression IN range_expression
    (21) while_statement -> . WHILE expression COLON statements
    (40) token -> . COLON
    (41) token -> . EQUAL
    (35) datatype -> . INTEGER
    (36) datatype -> . FLOAT
    (37) datatype -> . STRING
    (38) datatype -> . IDENTIFIER
    (39) datatype -> . bool
    (22) bool -> . TRUE
    (23) bool -> . FALSE

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQUAREDBRACKET resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 47 (empty -> .)
    ENDIF           reduce using rule 47 (empty -> .)
    ELSE            reduce using rule 47 (empty -> .)
    LPAREN          shift and go to state 14
    LSQUAREDBRACKET shift and go to state 15
    IDENTIFIER      shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    COLON           shift and go to state 20
    EQUAL           shift and go to state 13
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

  ! LPAREN          [ reduce using rule 47 (empty -> .) ]
  ! LSQUAREDBRACKET [ reduce using rule 47 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 47 (empty -> .) ]
  ! PRINT           [ reduce using rule 47 (empty -> .) ]
  ! IF              [ reduce using rule 47 (empty -> .) ]
  ! FOR             [ reduce using rule 47 (empty -> .) ]
  ! WHILE           [ reduce using rule 47 (empty -> .) ]
  ! COLON           [ reduce using rule 47 (empty -> .) ]
  ! EQUAL           [ reduce using rule 47 (empty -> .) ]
  ! INTEGER         [ reduce using rule 47 (empty -> .) ]
  ! FLOAT           [ reduce using rule 47 (empty -> .) ]
  ! STRING          [ reduce using rule 47 (empty -> .) ]
  ! TRUE            [ reduce using rule 47 (empty -> .) ]
  ! FALSE           [ reduce using rule 47 (empty -> .) ]

    expression                     shift and go to state 5
    statements                     shift and go to state 67
    statement                      shift and go to state 2
    empty                          shift and go to state 3
    conditional                    shift and go to state 4
    assignment_statement           shift and go to state 6
    function_call                  shift and go to state 7
    print_statement                shift and go to state 8
    inline_if_statement            shift and go to state 9
    for_statement                  shift and go to state 10
    while_statement                shift and go to state 11
    datatype                       shift and go to state 12
    token                          shift and go to state 16
    bool                           shift and go to state 26

state 61

    (43) function_call -> IDENTIFIER LPAREN argument_list RPAREN .

    LPAREN          reduce using rule 43 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    LSQUAREDBRACKET reduce using rule 43 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    IDENTIFIER      reduce using rule 43 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    PRINT           reduce using rule 43 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    IF              reduce using rule 43 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    FOR             reduce using rule 43 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    WHILE           reduce using rule 43 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    COLON           reduce using rule 43 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    EQUAL           reduce using rule 43 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    INTEGER         reduce using rule 43 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    FLOAT           reduce using rule 43 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    STRING          reduce using rule 43 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    TRUE            reduce using rule 43 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    FALSE           reduce using rule 43 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    $end            reduce using rule 43 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    ENDIF           reduce using rule 43 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    ELSE            reduce using rule 43 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)


state 62

    (44) argument_list -> datatype IDENTIFIER . COMMA argument_list
    (45) argument_list -> datatype IDENTIFIER .

    COMMA           shift and go to state 68
    RPAREN          reduce using rule 45 (argument_list -> datatype IDENTIFIER .)


state 63

    (24) print_statement -> PRINT LPAREN expression RPAREN .

    LPAREN          reduce using rule 24 (print_statement -> PRINT LPAREN expression RPAREN .)
    LSQUAREDBRACKET reduce using rule 24 (print_statement -> PRINT LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 24 (print_statement -> PRINT LPAREN expression RPAREN .)
    PRINT           reduce using rule 24 (print_statement -> PRINT LPAREN expression RPAREN .)
    IF              reduce using rule 24 (print_statement -> PRINT LPAREN expression RPAREN .)
    FOR             reduce using rule 24 (print_statement -> PRINT LPAREN expression RPAREN .)
    WHILE           reduce using rule 24 (print_statement -> PRINT LPAREN expression RPAREN .)
    COLON           reduce using rule 24 (print_statement -> PRINT LPAREN expression RPAREN .)
    EQUAL           reduce using rule 24 (print_statement -> PRINT LPAREN expression RPAREN .)
    INTEGER         reduce using rule 24 (print_statement -> PRINT LPAREN expression RPAREN .)
    FLOAT           reduce using rule 24 (print_statement -> PRINT LPAREN expression RPAREN .)
    STRING          reduce using rule 24 (print_statement -> PRINT LPAREN expression RPAREN .)
    TRUE            reduce using rule 24 (print_statement -> PRINT LPAREN expression RPAREN .)
    FALSE           reduce using rule 24 (print_statement -> PRINT LPAREN expression RPAREN .)
    $end            reduce using rule 24 (print_statement -> PRINT LPAREN expression RPAREN .)
    ENDIF           reduce using rule 24 (print_statement -> PRINT LPAREN expression RPAREN .)
    ELSE            reduce using rule 24 (print_statement -> PRINT LPAREN expression RPAREN .)


state 64

    (17) inline_if_statement -> IF expression COLON statements . ENDIF
    (18) inline_if_statement -> IF expression COLON statements . ELSE statements

    ENDIF           shift and go to state 69
    ELSE            shift and go to state 70


state 65

    (19) for_statement -> FOR expression IN range_expression .

    LPAREN          reduce using rule 19 (for_statement -> FOR expression IN range_expression .)
    LSQUAREDBRACKET reduce using rule 19 (for_statement -> FOR expression IN range_expression .)
    IDENTIFIER      reduce using rule 19 (for_statement -> FOR expression IN range_expression .)
    PRINT           reduce using rule 19 (for_statement -> FOR expression IN range_expression .)
    IF              reduce using rule 19 (for_statement -> FOR expression IN range_expression .)
    FOR             reduce using rule 19 (for_statement -> FOR expression IN range_expression .)
    WHILE           reduce using rule 19 (for_statement -> FOR expression IN range_expression .)
    COLON           reduce using rule 19 (for_statement -> FOR expression IN range_expression .)
    EQUAL           reduce using rule 19 (for_statement -> FOR expression IN range_expression .)
    INTEGER         reduce using rule 19 (for_statement -> FOR expression IN range_expression .)
    FLOAT           reduce using rule 19 (for_statement -> FOR expression IN range_expression .)
    STRING          reduce using rule 19 (for_statement -> FOR expression IN range_expression .)
    TRUE            reduce using rule 19 (for_statement -> FOR expression IN range_expression .)
    FALSE           reduce using rule 19 (for_statement -> FOR expression IN range_expression .)
    $end            reduce using rule 19 (for_statement -> FOR expression IN range_expression .)
    ENDIF           reduce using rule 19 (for_statement -> FOR expression IN range_expression .)
    ELSE            reduce using rule 19 (for_statement -> FOR expression IN range_expression .)


state 66

    (20) range_expression -> RANGE . expression COMMA expression
    (25) expression -> . expression GREATERTHAN datatype
    (26) expression -> . expression PLUS datatype
    (27) expression -> . expression MINUS datatype
    (28) expression -> . expression TIMES datatype
    (29) expression -> . expression DIVIDE datatype
    (30) expression -> . expression EQUAL datatype
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . LSQUAREDBRACKET expression RSQUAREDBRACKET
    (33) expression -> . token
    (34) expression -> . datatype
    (40) token -> . COLON
    (41) token -> . EQUAL
    (35) datatype -> . INTEGER
    (36) datatype -> . FLOAT
    (37) datatype -> . STRING
    (38) datatype -> . IDENTIFIER
    (39) datatype -> . bool
    (22) bool -> . TRUE
    (23) bool -> . FALSE

    LPAREN          shift and go to state 14
    LSQUAREDBRACKET shift and go to state 15
    COLON           shift and go to state 20
    EQUAL           shift and go to state 13
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25
    IDENTIFIER      shift and go to state 37
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 71
    datatype                       shift and go to state 12
    token                          shift and go to state 16
    bool                           shift and go to state 26

state 67

    (21) while_statement -> WHILE expression COLON statements .

    LPAREN          reduce using rule 21 (while_statement -> WHILE expression COLON statements .)
    LSQUAREDBRACKET reduce using rule 21 (while_statement -> WHILE expression COLON statements .)
    IDENTIFIER      reduce using rule 21 (while_statement -> WHILE expression COLON statements .)
    PRINT           reduce using rule 21 (while_statement -> WHILE expression COLON statements .)
    IF              reduce using rule 21 (while_statement -> WHILE expression COLON statements .)
    FOR             reduce using rule 21 (while_statement -> WHILE expression COLON statements .)
    WHILE           reduce using rule 21 (while_statement -> WHILE expression COLON statements .)
    COLON           reduce using rule 21 (while_statement -> WHILE expression COLON statements .)
    EQUAL           reduce using rule 21 (while_statement -> WHILE expression COLON statements .)
    INTEGER         reduce using rule 21 (while_statement -> WHILE expression COLON statements .)
    FLOAT           reduce using rule 21 (while_statement -> WHILE expression COLON statements .)
    STRING          reduce using rule 21 (while_statement -> WHILE expression COLON statements .)
    TRUE            reduce using rule 21 (while_statement -> WHILE expression COLON statements .)
    FALSE           reduce using rule 21 (while_statement -> WHILE expression COLON statements .)
    $end            reduce using rule 21 (while_statement -> WHILE expression COLON statements .)
    ENDIF           reduce using rule 21 (while_statement -> WHILE expression COLON statements .)
    ELSE            reduce using rule 21 (while_statement -> WHILE expression COLON statements .)


state 68

    (44) argument_list -> datatype IDENTIFIER COMMA . argument_list
    (44) argument_list -> . datatype IDENTIFIER COMMA argument_list
    (45) argument_list -> . datatype IDENTIFIER
    (46) argument_list -> . empty
    (35) datatype -> . INTEGER
    (36) datatype -> . FLOAT
    (37) datatype -> . STRING
    (38) datatype -> . IDENTIFIER
    (39) datatype -> . bool
    (47) empty -> .
    (22) bool -> . TRUE
    (23) bool -> . FALSE

    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25
    IDENTIFIER      shift and go to state 37
    RPAREN          reduce using rule 47 (empty -> .)
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    datatype                       shift and go to state 55
    argument_list                  shift and go to state 72
    empty                          shift and go to state 56
    bool                           shift and go to state 26

state 69

    (17) inline_if_statement -> IF expression COLON statements ENDIF .

    LPAREN          reduce using rule 17 (inline_if_statement -> IF expression COLON statements ENDIF .)
    LSQUAREDBRACKET reduce using rule 17 (inline_if_statement -> IF expression COLON statements ENDIF .)
    IDENTIFIER      reduce using rule 17 (inline_if_statement -> IF expression COLON statements ENDIF .)
    PRINT           reduce using rule 17 (inline_if_statement -> IF expression COLON statements ENDIF .)
    IF              reduce using rule 17 (inline_if_statement -> IF expression COLON statements ENDIF .)
    FOR             reduce using rule 17 (inline_if_statement -> IF expression COLON statements ENDIF .)
    WHILE           reduce using rule 17 (inline_if_statement -> IF expression COLON statements ENDIF .)
    COLON           reduce using rule 17 (inline_if_statement -> IF expression COLON statements ENDIF .)
    EQUAL           reduce using rule 17 (inline_if_statement -> IF expression COLON statements ENDIF .)
    INTEGER         reduce using rule 17 (inline_if_statement -> IF expression COLON statements ENDIF .)
    FLOAT           reduce using rule 17 (inline_if_statement -> IF expression COLON statements ENDIF .)
    STRING          reduce using rule 17 (inline_if_statement -> IF expression COLON statements ENDIF .)
    TRUE            reduce using rule 17 (inline_if_statement -> IF expression COLON statements ENDIF .)
    FALSE           reduce using rule 17 (inline_if_statement -> IF expression COLON statements ENDIF .)
    $end            reduce using rule 17 (inline_if_statement -> IF expression COLON statements ENDIF .)
    ENDIF           reduce using rule 17 (inline_if_statement -> IF expression COLON statements ENDIF .)
    ELSE            reduce using rule 17 (inline_if_statement -> IF expression COLON statements ENDIF .)


state 70

    (18) inline_if_statement -> IF expression COLON statements ELSE . statements
    (1) statements -> . statement statements
    (2) statements -> . statement
    (3) statements -> . empty
    (4) statement -> . conditional
    (5) statement -> . expression
    (6) statement -> . assignment_statement
    (7) statement -> . function_call
    (8) statement -> . print_statement
    (9) statement -> . empty
    (47) empty -> .
    (10) conditional -> . inline_if_statement
    (11) conditional -> . for_statement
    (12) conditional -> . while_statement
    (25) expression -> . expression GREATERTHAN datatype
    (26) expression -> . expression PLUS datatype
    (27) expression -> . expression MINUS datatype
    (28) expression -> . expression TIMES datatype
    (29) expression -> . expression DIVIDE datatype
    (30) expression -> . expression EQUAL datatype
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . LSQUAREDBRACKET expression RSQUAREDBRACKET
    (33) expression -> . token
    (34) expression -> . datatype
    (42) assignment_statement -> . IDENTIFIER EQUAL expression
    (43) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (24) print_statement -> . PRINT LPAREN expression RPAREN
    (17) inline_if_statement -> . IF expression COLON statements ENDIF
    (18) inline_if_statement -> . IF expression COLON statements ELSE statements
    (19) for_statement -> . FOR expression IN range_expression
    (21) while_statement -> . WHILE expression COLON statements
    (40) token -> . COLON
    (41) token -> . EQUAL
    (35) datatype -> . INTEGER
    (36) datatype -> . FLOAT
    (37) datatype -> . STRING
    (38) datatype -> . IDENTIFIER
    (39) datatype -> . bool
    (22) bool -> . TRUE
    (23) bool -> . FALSE

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQUAREDBRACKET resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 47 (empty -> .)
    ENDIF           reduce using rule 47 (empty -> .)
    ELSE            reduce using rule 47 (empty -> .)
    LPAREN          shift and go to state 14
    LSQUAREDBRACKET shift and go to state 15
    IDENTIFIER      shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    COLON           shift and go to state 20
    EQUAL           shift and go to state 13
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

  ! LPAREN          [ reduce using rule 47 (empty -> .) ]
  ! LSQUAREDBRACKET [ reduce using rule 47 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 47 (empty -> .) ]
  ! PRINT           [ reduce using rule 47 (empty -> .) ]
  ! IF              [ reduce using rule 47 (empty -> .) ]
  ! FOR             [ reduce using rule 47 (empty -> .) ]
  ! WHILE           [ reduce using rule 47 (empty -> .) ]
  ! COLON           [ reduce using rule 47 (empty -> .) ]
  ! EQUAL           [ reduce using rule 47 (empty -> .) ]
  ! INTEGER         [ reduce using rule 47 (empty -> .) ]
  ! FLOAT           [ reduce using rule 47 (empty -> .) ]
  ! STRING          [ reduce using rule 47 (empty -> .) ]
  ! TRUE            [ reduce using rule 47 (empty -> .) ]
  ! FALSE           [ reduce using rule 47 (empty -> .) ]

    expression                     shift and go to state 5
    statements                     shift and go to state 73
    statement                      shift and go to state 2
    empty                          shift and go to state 3
    conditional                    shift and go to state 4
    assignment_statement           shift and go to state 6
    function_call                  shift and go to state 7
    print_statement                shift and go to state 8
    inline_if_statement            shift and go to state 9
    for_statement                  shift and go to state 10
    while_statement                shift and go to state 11
    datatype                       shift and go to state 12
    token                          shift and go to state 16
    bool                           shift and go to state 26

state 71

    (20) range_expression -> RANGE expression . COMMA expression
    (25) expression -> expression . GREATERTHAN datatype
    (26) expression -> expression . PLUS datatype
    (27) expression -> expression . MINUS datatype
    (28) expression -> expression . TIMES datatype
    (29) expression -> expression . DIVIDE datatype
    (30) expression -> expression . EQUAL datatype

    COMMA           shift and go to state 74
    GREATERTHAN     shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    EQUAL           shift and go to state 35


state 72

    (44) argument_list -> datatype IDENTIFIER COMMA argument_list .

    RPAREN          reduce using rule 44 (argument_list -> datatype IDENTIFIER COMMA argument_list .)


state 73

    (18) inline_if_statement -> IF expression COLON statements ELSE statements .

    LPAREN          reduce using rule 18 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    LSQUAREDBRACKET reduce using rule 18 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    IDENTIFIER      reduce using rule 18 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    PRINT           reduce using rule 18 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    IF              reduce using rule 18 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    FOR             reduce using rule 18 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    WHILE           reduce using rule 18 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    COLON           reduce using rule 18 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    EQUAL           reduce using rule 18 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    INTEGER         reduce using rule 18 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    FLOAT           reduce using rule 18 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    STRING          reduce using rule 18 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    TRUE            reduce using rule 18 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    FALSE           reduce using rule 18 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    $end            reduce using rule 18 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    ENDIF           reduce using rule 18 (inline_if_statement -> IF expression COLON statements ELSE statements .)
    ELSE            reduce using rule 18 (inline_if_statement -> IF expression COLON statements ELSE statements .)


state 74

    (20) range_expression -> RANGE expression COMMA . expression
    (25) expression -> . expression GREATERTHAN datatype
    (26) expression -> . expression PLUS datatype
    (27) expression -> . expression MINUS datatype
    (28) expression -> . expression TIMES datatype
    (29) expression -> . expression DIVIDE datatype
    (30) expression -> . expression EQUAL datatype
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . LSQUAREDBRACKET expression RSQUAREDBRACKET
    (33) expression -> . token
    (34) expression -> . datatype
    (40) token -> . COLON
    (41) token -> . EQUAL
    (35) datatype -> . INTEGER
    (36) datatype -> . FLOAT
    (37) datatype -> . STRING
    (38) datatype -> . IDENTIFIER
    (39) datatype -> . bool
    (22) bool -> . TRUE
    (23) bool -> . FALSE

    LPAREN          shift and go to state 14
    LSQUAREDBRACKET shift and go to state 15
    COLON           shift and go to state 20
    EQUAL           shift and go to state 13
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25
    IDENTIFIER      shift and go to state 37
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 75
    datatype                       shift and go to state 12
    token                          shift and go to state 16
    bool                           shift and go to state 26

state 75

    (20) range_expression -> RANGE expression COMMA expression .
    (25) expression -> expression . GREATERTHAN datatype
    (26) expression -> expression . PLUS datatype
    (27) expression -> expression . MINUS datatype
    (28) expression -> expression . TIMES datatype
    (29) expression -> expression . DIVIDE datatype
    (30) expression -> expression . EQUAL datatype

  ! shift/reduce conflict for EQUAL resolved as shift
    LPAREN          reduce using rule 20 (range_expression -> RANGE expression COMMA expression .)
    LSQUAREDBRACKET reduce using rule 20 (range_expression -> RANGE expression COMMA expression .)
    IDENTIFIER      reduce using rule 20 (range_expression -> RANGE expression COMMA expression .)
    PRINT           reduce using rule 20 (range_expression -> RANGE expression COMMA expression .)
    IF              reduce using rule 20 (range_expression -> RANGE expression COMMA expression .)
    FOR             reduce using rule 20 (range_expression -> RANGE expression COMMA expression .)
    WHILE           reduce using rule 20 (range_expression -> RANGE expression COMMA expression .)
    COLON           reduce using rule 20 (range_expression -> RANGE expression COMMA expression .)
    INTEGER         reduce using rule 20 (range_expression -> RANGE expression COMMA expression .)
    FLOAT           reduce using rule 20 (range_expression -> RANGE expression COMMA expression .)
    STRING          reduce using rule 20 (range_expression -> RANGE expression COMMA expression .)
    TRUE            reduce using rule 20 (range_expression -> RANGE expression COMMA expression .)
    FALSE           reduce using rule 20 (range_expression -> RANGE expression COMMA expression .)
    $end            reduce using rule 20 (range_expression -> RANGE expression COMMA expression .)
    ENDIF           reduce using rule 20 (range_expression -> RANGE expression COMMA expression .)
    ELSE            reduce using rule 20 (range_expression -> RANGE expression COMMA expression .)
    GREATERTHAN     shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    EQUAL           shift and go to state 35

  ! EQUAL           [ reduce using rule 20 (range_expression -> RANGE expression COMMA expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 0 resolved as shift
WARNING: shift/reduce conflict for LSQUAREDBRACKET in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for COLON in state 0 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 0 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 0 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 0 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 2 resolved as shift
WARNING: shift/reduce conflict for LSQUAREDBRACKET in state 2 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 2 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for COLON in state 2 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 2 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 2 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 2 resolved as shift
WARNING: shift/reduce conflict for STRING in state 2 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 2 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 2 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 5 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 17 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 17 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 53 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 58 resolved as shift
WARNING: shift/reduce conflict for LSQUAREDBRACKET in state 58 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 58 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 58 resolved as shift
WARNING: shift/reduce conflict for IF in state 58 resolved as shift
WARNING: shift/reduce conflict for FOR in state 58 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 58 resolved as shift
WARNING: shift/reduce conflict for COLON in state 58 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 58 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 58 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 58 resolved as shift
WARNING: shift/reduce conflict for STRING in state 58 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 58 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 58 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 60 resolved as shift
WARNING: shift/reduce conflict for LSQUAREDBRACKET in state 60 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 60 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 60 resolved as shift
WARNING: shift/reduce conflict for IF in state 60 resolved as shift
WARNING: shift/reduce conflict for FOR in state 60 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 60 resolved as shift
WARNING: shift/reduce conflict for COLON in state 60 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 60 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 60 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 60 resolved as shift
WARNING: shift/reduce conflict for STRING in state 60 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 60 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 60 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 70 resolved as shift
WARNING: shift/reduce conflict for LSQUAREDBRACKET in state 70 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 70 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 70 resolved as shift
WARNING: shift/reduce conflict for IF in state 70 resolved as shift
WARNING: shift/reduce conflict for FOR in state 70 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 70 resolved as shift
WARNING: shift/reduce conflict for COLON in state 70 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 70 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 70 resolved as shift
WARNING: shift/reduce conflict for STRING in state 70 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 70 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 70 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 75 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (statements -> statement)
WARNING: rejected rule (empty -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 3 resolved using rule (statements -> empty)
WARNING: rejected rule (statement -> empty) in state 3
WARNING: Rule (statement -> empty) is never reduced
